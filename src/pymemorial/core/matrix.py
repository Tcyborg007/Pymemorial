"""
Sistema de Matrizes Robusto com SymPy e NumPy - PyMemorial v2.2.0

üî• MELHORIAS IMPLEMENTADAS (v2.2.0):
‚úÖ Cache inteligente de parsing simb√≥lico
‚úÖ Valida√ß√£o aprimorada com detec√ß√£o de edge cases
‚úÖ M√©todo de clonagem profunda para matrizes
‚úÖ Suporte a opera√ß√µes in-place otimizadas
‚úÖ Logging estruturado com n√≠veis granulares
‚úÖ Detec√ß√£o autom√°tica de simetria e propriedades especiais
‚úÖ Serializa√ß√£o/deserializa√ß√£o JSON
‚úÖ Compara√ß√£o robusta de matrizes (simb√≥licas e num√©ricas)

Autor: PyMemorial Team (Enhanced by Claude)
Data: 2025-10-29
Vers√£o: 2.2.0 (Production Ready)
"""

from __future__ import annotations
import logging
from typing import Dict, Any, List, Optional, Union, Tuple, Literal
from dataclasses import dataclass, field
from copy import deepcopy
import traceback
import re
import ast
import json
from functools import lru_cache
import hashlib
from pymemorial.core.value_formatter import RobustValueFormatter, validate_latex_expr

# Core dependencies
try:
    import numpy as np
    NUMPY_AVAILABLE = True
except ImportError:
    NUMPY_AVAILABLE = False
    np = None

try:
    import pandas as pd
    PANDAS_AVAILABLE = True
except ImportError:
    PANDAS_AVAILABLE = False
    pd = None

try:
    import sympy as sp
    from sympy import Matrix as SpMatrix, latex as sp_latex
    SYMPY_AVAILABLE = True
except ImportError:
    SYMPY_AVAILABLE = False
    sp = None
    SpMatrix = None

# PyMemorial core - IMPORTS ROBUSTOS
try:
    from .variable import Variable
    from .units import parse_quantity, strip_units, ureg, PINT_OK
except (ImportError, ValueError):
    try:
        from pymemorial.core.variable import Variable
        from pymemorial.core.units import parse_quantity, strip_units, ureg, PINT_OK
    except ImportError:
        Variable = type('Variable', (object,), {})
        def parse_quantity(v, u=None): return v
        def strip_units(v): return float(v) if v is not None else 0.0
        ureg = None
        PINT_OK = False

logger = logging.getLogger(__name__)

# Type aliases
MatrixType = Union[np.ndarray, pd.DataFrame, 'SpMatrix', List[List[float]], str]

# ============================================================================
# ENHANCED MATRIX CLASS (v2.2.0)
# ============================================================================

@dataclass
class Matrix:
    """
    Representa uma matriz com capacidades simb√≥licas (SymPy)
    e num√©ricas (NumPy).
    
    üéØ Suporta:
    - Express√µes simb√≥licas (ex: "[[12*E*I/L**3, ...]]")
    - NumPy arrays, Pandas DataFrames, Listas Python
    - Cache inteligente de opera√ß√µes
    - Serializa√ß√£o JSON
    - Compara√ß√£o robusta
    """
    # Core attributes
    data: MatrixType
    variables: Dict[str, Variable] = field(default_factory=dict)
    description: str = ""
    name: str = "M"
    
    # Metadata
    shape: Optional[Tuple[int, int]] = None
    is_symbolic: bool = False
    is_square: bool = False
    
    # Internal state
    _symbolic_matrix: Optional[SpMatrix] = field(default=None, init=False, repr=False)
    _numeric_matrix: Optional[np.ndarray] = field(default=None, init=False, repr=False)
    _parse_hash: Optional[str] = field(default=None, init=False, repr=False)
    _properties_cache: Dict[str, Any] = field(default_factory=dict, init=False, repr=False)

    def __post_init__(self):
        """Inicializa e valida a matriz."""
        if not SYMPY_AVAILABLE:
            raise ImportError("SymPy √© obrigat√≥rio para a classe Matrix robusta.")
        if not NUMPY_AVAILABLE:
            raise ImportError("NumPy √© obrigat√≥rio para a classe Matrix robusta.")
        
        # Debug logging
        if isinstance(self.data, str):
            logger.debug(f"üîç Matrix '{self.name}': parsing string de {len(self.data)} chars")
            if self.variables:
                var_summary = {k: (v.value if hasattr(v, 'value') else 'N/A') 
                              for k, v in list(self.variables.items())[:5]}
                logger.debug(f"   Vari√°veis: {var_summary}")
        
        self._parse_matrix()
        self._validate()
        self._detect_special_properties()
        
        logger.debug(
            f"‚úÖ Matrix '{self.name}' inicializada: "
            f"shape={self.shape}, symbolic={self.is_symbolic}, "
            f"special={list(self._properties_cache.keys())}"
        )

    # ========================================================================
    # CORE PARSING (MANTIDO COMPAT√çVEL)
    # ========================================================================

    def _parse_matrix(self):
        """
        Parsing 100% ISOLADO - Compat√≠vel com v2.1.9
        """
        # Case 1: String expression
        if isinstance(self.data, str):
            if not SYMPY_AVAILABLE:
                raise ImportError("SymPy √© necess√°rio para matrizes simb√≥licas")
            
            # Gerar hash para cache
            self._parse_hash = self._generate_parse_hash()
            
            try:
                self._symbolic_matrix = self._parse_matrix_string(self.data)
                self.is_symbolic = True
                self.shape = self._symbolic_matrix.shape
                
                # Valida√ß√£o rigorosa
                self._validate_symbolic_purity()
                
            except Exception as e:
                logger.error(f"Falha ao parsear matriz: {e}")
                raise ValueError(f"Falha ao parsear express√£o da matriz: {e}")
        
        # Cases 2-5: (mantidos inalterados)
        elif SYMPY_AVAILABLE and isinstance(self.data, SpMatrix):
            self._symbolic_matrix = self.data
            self.is_symbolic = True
            self.shape = self.data.shape
        
        elif NUMPY_AVAILABLE and isinstance(self.data, np.ndarray):
            self._numeric_matrix = self.data
            self.is_symbolic = False
            self.shape = self.data.shape
        
        elif PANDAS_AVAILABLE and isinstance(self.data, pd.DataFrame):
            self._numeric_matrix = self.data.values
            self.is_symbolic = False
            self.shape = self.data.shape
        
        elif isinstance(self.data, (list, tuple)):
            try:
                self._numeric_matrix = np.array(self.data, dtype=float)
                self.shape = self._numeric_matrix.shape
                self.is_symbolic = False
            except ValueError:
                try:
                    self._symbolic_matrix = SpMatrix(self.data)
                    self.is_symbolic = True
                    self.shape = self._symbolic_matrix.shape
                except Exception as e2:
                    raise ValueError(f"Lista n√£o p√¥de ser parseada: {e2}")
        else:
            raise TypeError(f"Tipo de dado n√£o suportado: {type(self.data)}")
        
        if self.shape:
            self.is_square = (self.shape[0] == self.shape[1])

    def _validate(self):
        """Valida dados da matriz."""
        if self.shape is None:
            raise ValueError("Shape da matriz n√£o determinado")
        if self.shape[0] == 0 or self.shape[1] == 0:
            raise ValueError("Matriz nula")
        
        # Valida√ß√£o adicional de dimens√µes razo√°veis
        max_dim = 10000  # Limite razo√°vel
        if self.shape[0] > max_dim or self.shape[1] > max_dim:
            logger.warning(f"‚ö†Ô∏è Matriz muito grande: {self.shape}")

    def _parse_matrix_string(self, expr_str: str) -> SpMatrix:
        """
        Parse matrix expression from string to SymPy Matrix.
        COMPAT√çVEL com v2.1.9
        """
        if self.variables:
            symbol_names = list(self.variables.keys())
        else:
            symbol_names = self._extract_variable_names_from_expression(expr_str)
        
        # Criar s√≠mbolos puros
        local_dict = {}
        for name in symbol_names:
            local_dict[name] = sp.Symbol(name, real=True, positive=True)
        
        logger.debug(f"Parsing com s√≠mbolos puros: {list(local_dict.keys())}")
        
        try:
            parsed_matrix = sp.sympify(
                expr_str,
                locals=local_dict,
                evaluate=False,
                rational=False
            )
            
            if not isinstance(parsed_matrix, (list, SpMatrix)):
                raise ValueError("N√£o √© lista ou matriz")
            
            if isinstance(parsed_matrix, list):
                parsed_matrix = SpMatrix(parsed_matrix)
            
            logger.debug(f"‚úÖ Parsing bem-sucedido: {parsed_matrix.shape}")
            return parsed_matrix
            
        except Exception as e:
            logger.warning(f"Parsing direto falhou: {e}. Usando fallback...")
            return self._parse_matrix_safe_v2(expr_str, local_dict)

    def _parse_matrix_safe_v2(self, expr_str: str, isolated_symbols: Dict) -> SpMatrix:
        """
        Fallback robusto com isolamento absoluto.
        VERS√ÉO ROBUSTA - v2.2.1
        """
        try:
            clean_expr = expr_str.strip()
            
            isolated_namespace = {
                "__builtins__": {},
                **isolated_symbols
            }
            
            # Adicionar fun√ß√µes matem√°ticas
            math_functions = {
                'sin': sp.sin, 'cos': sp.cos, 'tan': sp.tan,
                'exp': sp.exp, 'log': sp.log, 'sqrt': sp.sqrt,
                'pi': sp.pi, 'E': sp.E, 'abs': sp.Abs
            }
            isolated_namespace.update(math_functions)
            
            matrix_data = eval(clean_expr, isolated_namespace, {})
            
            if not isinstance(matrix_data, list):
                raise ValueError(f"eval retornou tipo inv√°lido: {type(matrix_data)}")
            
            result = SpMatrix(matrix_data)
            
            # Valida√ß√£o de pureza ROBUSTA
            latex_check = sp.latex(result)
            contaminations = []
            
            for name, var in self.variables.items():
                if var.value is not None:
                    value_str = str(strip_units(var.value))
                    
                    # Usar a fun√ß√£o robusta de detec√ß√£o
                    if self._is_value_contaminating_latex(value_str, latex_check, name):
                        contaminations.append(f"{name}={value_str}")
            
            if contaminations:
                raise ValueError(
                    f"‚ùå CONTAMINA√á√ÉO NUM√âRICA DETECTADA NO FALLBACK!\n"
                    f"   Vari√°veis contaminadas: {', '.join(contaminations)}\n"
                    f"   LaTeX (primeiros 300 chars): {latex_check[:300]}...\n"
                    f"   CAUSA: Parsing no fallback acessou valores em vez de s√≠mbolos puros.\n"
                    f"   SOLU√á√ÉO: Revise a express√£o da matriz para garantir uso correto de s√≠mbolos."
                )
            
            logger.debug(f"‚úÖ Fallback bem-sucedido e validado (sem contamina√ß√£o): shape={result.shape}")
            return result
            
        except Exception as e:
            logger.error(f"Fallback seguro falhou: {e}")
            raise ValueError(f"N√£o foi poss√≠vel parsear matriz de forma segura: {e}")


    def _extract_variable_names_from_expression(self, expr_str: str) -> List[str]:
        """
        Extrai nomes de vari√°veis de uma express√£o string.
        COMPAT√çVEL com v2.1.9
        """
        if self.variables:
            return list(self.variables.keys())
        
        var_pattern = re.compile(r'\b([a-zA-Z_][a-zA-Z0-9_]*)\b')
        reserved_words = {
            'sin', 'cos', 'tan', 'exp', 'log', 'sqrt', 'pi', 'e', 
            'Matrix', 'oo', 'zoo', 'nan', 'True', 'False',
            'and', 'or', 'not', 'if', 'else', 'for', 'while'
        }
        
        found_names = set()
        for match in var_pattern.finditer(expr_str):
            name = match.group(1)
            if (not name.isdigit() and 
                name not in reserved_words and
                not name.startswith('_')):
                found_names.add(name)
        
        return list(found_names)

    def _validate_symbolic_purity(self):
        """
        Valida√ß√£o rigorosa de pureza simb√≥lica.
        COMPAT√çVEL com v2.1.9
        """
        if not self.is_symbolic or self._symbolic_matrix is None:
            return
        
        latex_output = sp_latex(self._symbolic_matrix)
        
        # Criar lista de contamina√ß√µes detectadas para relat√≥rio detalhado
        contaminations = []
        
        for var_name, var in self.variables.items():
            if var.value is not None:
                value_str = str(strip_units(var.value))
                
                if value_str and self._is_value_contaminating_latex(value_str, latex_output, var_name):
                    contaminations.append({
                        'variable': var_name,
                        'value': value_str,
                        'position': latex_output.find(value_str)
                    })
        
        if contaminations:
            # Construir mensagem de erro detalhada
            error_msg = "‚ùå CONTAMINA√á√ÉO NUM√âRICA DETECTADA!\n\n"
            error_msg += "Vari√°veis contaminadas:\n"
            
            for cont in contaminations:
                error_msg += f"  ‚Ä¢ {cont['variable']} = {cont['value']}\n"
            
            error_msg += f"\nLaTeX gerado (primeiros 300 chars):\n{latex_output[:300]}...\n\n"
            error_msg += "CAUSA: Parsing acessou valores num√©ricos em vez de s√≠mbolos puros.\n"
            error_msg += "SOLU√á√ÉO: Verifique se as vari√°veis est√£o sendo passadas corretamente como s√≠mbolos."
            
            raise ValueError(error_msg)
        
        logger.debug("‚úÖ Valida√ß√£o de pureza simb√≥lica passou (sem contamina√ß√£o detectada)")

    def _is_value_contaminating_latex(self, value_str: str, latex_output: str, var_name: str) -> bool:
        """
        Detecta se um valor num√©rico contaminou o LaTeX simb√≥lico.
        VERS√ÉO DEFINITIVA - v2.2.2 (Sem Falsos Positivos)
        
        Diferencia entre:
        - ‚úÖ Coeficiente leg√≠timo: "6 E I" ou "12*E*I"
        - ‚ùå Contamina√ß√£o real: "{6.0}^3" ou "L = 6.0"
        """
        try:
            numeric_value = float(value_str)
            
            # ============================================================
            # ESTRAT√âGIA 1: Detectar padr√µes que indicam CONTAMINA√á√ÉO REAL
            # ============================================================
            
            # Padr√£o 1: N√∫mero dentro de chaves LaTeX (muito espec√≠fico de substitui√ß√£o)
            # Exemplo: {6.0}^{3} ou {{6.0}}
            contamination_patterns = [
                r'\{+' + re.escape(str(numeric_value)) + r'\}+',  # {6.0} ou {{6.0}}
                r'\{+' + re.escape(str(int(numeric_value))) + r'\.0+\}+',  # {6.0}
            ]
            
            # Padr√£o 2: N√∫mero com ponto decimal em contexto de pot√™ncia/fra√ß√£o
            # Exemplo: 6.0^3 (diferente de 6^3 que √© coeficiente)
            if '.' in str(numeric_value):
                contamination_patterns.append(
                    re.escape(str(numeric_value)) + r'\s*[\^_]'
                )
            
            # Padr√£o 3: N√∫mero isolado com contexto suspeito (n√£o seguido de vari√°vel)
            # Exemplo: "L = 6.0" ou "6.0 )" mas n√£o "6 E I"
            if numeric_value.is_integer():
                int_val = int(numeric_value)
                # Detectar apenas se N√ÉO est√° seguido imediatamente de vari√°vel
                contamination_patterns.append(
                    r'(?<![A-Za-z])' + str(int_val) + r'\.0+(?![A-Za-z])'
                )
            
            # Verificar padr√µes de contamina√ß√£o
            for pattern in contamination_patterns:
                if re.search(pattern, latex_output):
                    logger.warning(
                        f"‚ö†Ô∏è Contamina√ß√£o REAL detectada: padr√£o '{pattern}' "
                        f"para vari√°vel {var_name}={value_str}"
                    )
                    return True
            
            # ============================================================
            # ESTRAT√âGIA 2: Verificar se s√≠mbolos est√£o presentes
            # ============================================================
            
            # Se o nome da vari√°vel N√ÉO aparece no LaTeX, mas o valor SIM,
            # isso √© forte indicativo de contamina√ß√£o
            if var_name not in latex_output:
                # Vari√°vel foi completamente substitu√≠da pelo valor
                # Verificar se valor aparece em contextos t√≠picos de vari√°vel
                var_context_patterns = [
                    r'[\^_]\{?' + re.escape(str(numeric_value)) + r'\}?',  # ^6.0 ou _6.0
                    r'frac\{[^}]*' + re.escape(str(numeric_value)) + r'[^}]*\}',  # \frac{...6.0...}
                ]
                
                for pattern in var_context_patterns:
                    if re.search(pattern, latex_output):
                        logger.warning(
                            f"‚ö†Ô∏è Vari√°vel {var_name} ausente mas valor {value_str} "
                            f"presente em contexto de vari√°vel"
                        )
                        return True
            
            # ============================================================
            # ESTRAT√âGIA 3: Contexto seguro (n√£o √© contamina√ß√£o)
            # ============================================================
            
            # Se chegou aqui, verificar se √© um coeficiente leg√≠timo
            # Coeficientes geralmente aparecem multiplicando vari√°veis
            # Exemplo: "6 E I" ou "12 \cdot E"
            
            if numeric_value.is_integer():
                int_val = int(numeric_value)
                # Padr√£o de coeficiente: n√∫mero seguido de espa√ßo e letra mai√∫scula
                coef_pattern = r'(?<!\d)' + str(int_val) + r'\s+[A-Z]'
                if re.search(coef_pattern, latex_output):
                    logger.debug(
                        f"‚úÖ N√∫mero {int_val} identificado como coeficiente leg√≠timo "
                        f"(n√£o contamina√ß√£o de {var_name})"
                    )
                    return False
            
            # Se n√£o detectou contamina√ß√£o clara, considerar limpo
            logger.debug(f"‚úÖ Nenhuma contamina√ß√£o detectada para {var_name}={value_str}")
            return False
            
        except (ValueError, TypeError):
            # Se n√£o for convers√≠vel para float, testar string literal
            # (mais restritivo - apenas padr√µes muito espec√≠ficos)
            escaped_value = re.escape(value_str)
            
            # Apenas detectar se aparece em contextos MUITO espec√≠ficos
            specific_patterns = [
                r'\{+' + escaped_value + r'\}+',  # {valor}
                r'\\text\{[^}]*' + escaped_value + r'[^}]*\}',  # \text{...valor...}
            ]
            
            for pattern in specific_patterns:
                if re.search(pattern, latex_output):
                    logger.warning(
                        f"‚ö†Ô∏è Valor string '{value_str}' da vari√°vel {var_name} "
                        f"apareceu em contexto suspeito"
                    )
                    return True
            
            return False



    # ========================================================================
    # NOVAS FUNCIONALIDADES (v2.2.0)
    # ========================================================================

    def _generate_parse_hash(self) -> str:
        """Gera hash √∫nico para cache de parsing."""
        if not isinstance(self.data, str):
            return None
        
        hash_input = self.data + str(sorted(self.variables.keys()))
        return hashlib.md5(hash_input.encode()).hexdigest()

    def _detect_special_properties(self):
        """Detecta propriedades especiais da matriz (simetria, diagonal, etc)."""
        if not self.is_square:
            return
        
        try:
            mat = self.evaluate(use_cache=True)
            
            # Simetria
            if np.allclose(mat, mat.T):
                self._properties_cache['is_symmetric'] = True
                logger.debug(f"   Detectado: Matriz {self.name} √© sim√©trica")
            
            # Diagonal
            if np.allclose(mat, np.diag(np.diagonal(mat))):
                self._properties_cache['is_diagonal'] = True
                logger.debug(f"   Detectado: Matriz {self.name} √© diagonal")
            
            # Identidade
            if np.allclose(mat, np.eye(mat.shape[0])):
                self._properties_cache['is_identity'] = True
                logger.debug(f"   Detectado: Matriz {self.name} √© identidade")
            
            # Triangular superior/inferior
            if np.allclose(mat, np.triu(mat)):
                self._properties_cache['is_upper_triangular'] = True
            if np.allclose(mat, np.tril(mat)):
                self._properties_cache['is_lower_triangular'] = True
                
        except Exception as e:
            logger.debug(f"N√£o foi poss√≠vel detectar propriedades especiais: {e}")

    def clone(self) -> 'Matrix':
        """
        Cria uma c√≥pia profunda da matriz.
        
        Returns:
            Matrix: Nova inst√¢ncia independente
        """
        new_vars = {k: Variable(k, v.value if hasattr(v, 'value') else None)
                   for k, v in self.variables.items()}
        
        if self._numeric_matrix is not None:
            new_data = self._numeric_matrix.copy()
        elif self._symbolic_matrix is not None:
            new_data = str(self._symbolic_matrix)
        else:
            new_data = self.data
        
        return Matrix(
            data=new_data,
            variables=new_vars,
            description=self.description,
            name=f"{self.name}_copy"
        )

    def to_dict(self) -> Dict[str, Any]:
        """
        Serializa matriz para dicion√°rio JSON-compat√≠vel.
        
        Returns:
            Dict: Representa√ß√£o serializ√°vel
        """
        result = {
            'name': self.name,
            'description': self.description,
            'shape': self.shape,
            'is_symbolic': self.is_symbolic,
            'is_square': self.is_square
        }
        
        if self._numeric_matrix is not None:
            result['data'] = self._numeric_matrix.tolist()
            result['type'] = 'numeric'
        elif self._symbolic_matrix is not None:
            result['data'] = str(self._symbolic_matrix)
            result['type'] = 'symbolic'
            result['latex'] = sp_latex(self._symbolic_matrix)
        
        if self.variables:
            result['variables'] = {
                k: {'value': strip_units(v.value) if hasattr(v, 'value') else None}
                for k, v in self.variables.items()
            }
        
        return result

    def _generate_intermediate_latex_manual(self) -> str:
        """
        Fallback GARANTIDO - Gera LaTeX com valores num√©ricos.
        SOLU√á√ÉO ROBUSTA v3.0
        """
        import sympy as sp_module
        from sympy import latex as sp_latex
        
        if self._symbolic_matrix is None:
            return r"\text{Erro: matriz n√£o dispon√≠vel}"
        
        try:
            # Criar substitui√ß√£o com Float expl√≠cito
            subs_dict = {}
            for var_name, var in self.variables.items():
                if var.value is not None:
                    sym = sp_module.Symbol(var_name)
                    subs_dict[sym] = sp_module.Float(var.value)
            
            logger.debug(f"Fallback manual: substituindo {subs_dict}")
            
            # Substituir SEM avaliar
            matrix_with_values = self._symbolic_matrix.subs(subs_dict, evaluate=False)
            
            # Gerar LaTeX
            latex_str = sp_latex(
                matrix_with_values,
                fold_short_frac=False,
                mul_symbol='times'
            )
            
            latex_str = latex_str.replace(r'\cdot', r' \times ')
            
            # Validar
            if not any(c.isdigit() for c in latex_str):
                logger.error("‚ùå Fallback manual tamb√©m falhou!")
                return self._create_latex_from_scratch()
            
            logger.info(f"‚úÖ Fallback manual OK: {latex_str[:80]}...")
            return latex_str
            
        except Exception as e:
            logger.error(f"Erro no fallback manual: {e}")
            return self._create_latex_from_scratch()

    
    def _create_latex_from_scratch(self) -> str:
        """
        SOLU√á√ÉO BRUTA: Substitui√ß√£o FOR√áADA por string replacement.
        VERS√ÉO QUE FUNCIONOU - Mantida exatamente como estava.
        """
        import sympy as sp_module
        from sympy import latex as sp_latex
        import re
        
        try:
            logger.debug("üîß Iniciando substitui√ß√£o bruta...")
            
            # ================================================================
            # PASSO 1: Gerar LaTeX simb√≥lico puro
            # ================================================================
            
            latex_symbolic = sp_latex(
                self._symbolic_matrix,
                fold_short_frac=False,
                mul_symbol='times'
            )
            
            latex_symbolic = latex_symbolic.replace(r'\cdot', r' \times ')
            
            logger.debug(f"LaTeX simb√≥lico: {latex_symbolic[:100]}")
            
            # ================================================================
            # PASSO 2: SUBSTITUI√á√ÉO BRUTA por string replacement (FUNCIONA!)
            # ================================================================
            
            latex_with_values = latex_symbolic
            
            for var_name, var in self.variables.items():
                if var.value is not None:
                    # Obter valor formatado
                    value_str = f"{var.value:.1f}"  # Ex: 6.0, 21000.0
                    
                    # Padr√µes para substituir (ordem importa!)
                    patterns = [
                        # Padr√£o 1: Var^{exp}
                        (rf'{var_name}\^\{{([0-9]+)\}}', rf'{value_str}^{{\1}}'),
                        # Padr√£o 2: Var (sozinho, n√£o seguido de outros caracteres)
                        (rf'(?<![a-zA-Z0-9]){var_name}(?![a-zA-Z0-9_])', value_str),
                    ]
                    
                    for pattern, replacement in patterns:
                        latex_with_values = re.sub(pattern, replacement, latex_with_values)
                    
                    logger.debug(f"Substitu√≠do {var_name} ‚Üí {value_str}")
            
            # ================================================================
            # PASSO 3: Valida√ß√£o rigorosa
            # ================================================================
            
            # Verificar se AINDA cont√©m s√≠mbolos das vari√°veis
            symbols_remaining = []
            for var_name in self.variables.keys():
                # Verificar se s√≠mbolo aparece no LaTeX (n√£o como parte de n√∫mero)
                if re.search(rf'(?<![0-9.]){var_name}(?![a-zA-Z0-9])', latex_with_values):
                    symbols_remaining.append(var_name)
            
            if symbols_remaining:
                logger.error(f"‚ùå S√çMBOLOS AINDA PRESENTES: {symbols_remaining}")
                logger.error(f"LaTeX atual: {latex_with_values[:150]}")
                
                # PASSO 4: Substitui√ß√£o AINDA MAIS BRUTA (sem regex)
                for var_name in symbols_remaining:
                    var = self.variables[var_name]
                    if var.value is not None:
                        # Substituir TODAS as ocorr√™ncias isoladas
                        value_str = f"{var.value:.1f}"
                        # Usar word boundary
                        latex_with_values = re.sub(
                            rf'\b{var_name}\b',
                            value_str,
                            latex_with_values
                        )
                        logger.warning(f"‚ö†Ô∏è Substitui√ß√£o ultra-bruta: {var_name} ‚Üí {value_str}")
            
            # Verifica√ß√£o final
            if not any(char.isdigit() for char in latex_with_values):
                logger.critical("‚ùå FALHA TOTAL: Nenhum n√∫mero no LaTeX!")
                return self._create_numeric_only_latex()
            
            logger.info(f"‚úÖ Substitui√ß√£o bruta OK: {latex_with_values[:80]}...")
            return latex_with_values
            
        except Exception as e:
            logger.critical(f"‚ùå Erro cr√≠tico em _create_latex_from_scratch: {e}")
            import traceback
            logger.debug(traceback.format_exc())
            return self._create_numeric_only_latex()






    def _create_numeric_only_latex(self) -> str:
        """
        √öLTIMA INST√ÇNCIA: Avaliar matriz numericamente e formatar.
        VERS√ÉO CORRIGIDA - LaTeX 100% v√°lido.
        """
        try:
            logger.warning("‚ö†Ô∏è Usando m√©todo num√©rico puro (fallback)")
            
            import sympy as sp_module
            from sympy import latex as sp_latex
            
            # Criar dicion√°rio de substitui√ß√£o
            subs_dict = {}
            for var_name, var in self.variables.items():
                if var.value is not None:
                    sym = sp_module.Symbol(var_name)
                    subs_dict[sym] = var.value
            
            # Substituir na matriz simb√≥lica
            matrix_subst = self._symbolic_matrix.subs(subs_dict)
            
            # ================================================================
            # CONSTRUIR LaTeX ELEMENTO POR ELEMENTO (Garantia de sintaxe)
            # ================================================================
            
            rows, cols = self.shape
            latex_parts = [r"\begin{bmatrix}"]
            
            for i in range(rows):
                row_elements = []
                for j in range(cols):
                    elem = matrix_subst[i, j]
                    
                    # Gerar LaTeX do elemento
                    elem_latex = sp_latex(elem, fold_short_frac=False, mul_symbol='times')
                    elem_latex = elem_latex.replace(r'\cdot', r' \times ')
                    
                    # Validar que elemento tem chaves balanceadas
                    open_b = elem_latex.count('{')
                    close_b = elem_latex.count('}')
                    if open_b != close_b:
                        logger.warning(f"‚ö†Ô∏è Elemento [{i},{j}] com chaves desbalanceadas")
                        # Corrigir
                        if open_b > close_b:
                            elem_latex += '}' * (open_b - close_b)
                    
                    row_elements.append(elem_latex)
                
                # Montar linha da matriz
                latex_parts.append("  " + " & ".join(row_elements))
                if i < rows - 1:
                    latex_parts.append(r" \\")
            
            latex_parts.append(r"\end{bmatrix}")
            
            result = "\n".join(latex_parts)
            
            # Valida√ß√£o final
            if not any(char.isdigit() for char in result):
                logger.critical("‚ùå FALHA: Nenhum n√∫mero no resultado!")
                return r"\begin{bmatrix} \text{ERRO} \end{bmatrix}"
            
            logger.info(f"‚úÖ LaTeX num√©rico gerado: {result[:80]}...")
            return result
            
        except Exception as e:
            logger.critical(f"‚ùå Erro cr√≠tico: {e}")
            import traceback
            logger.debug(traceback.format_exc())
            return r"\begin{bmatrix} \text{ERRO CR√çTICO} \end{bmatrix}"

    def _get_matrix_size_command(self, section: str, scale: float = 1.0) -> str:
        """
        Retorna comando LaTeX de tamanho baseado em multiplicador float.
        VERS√ÉO CORRIGIDA v3.1 - Escala adaptativa melhorada
        
        Args:
            section: "symbolic", "substituted", "final"
            scale: Multiplicador base (0.5 a 2.0)
        
        Returns:
            str: Comando LaTeX proporcional
        """
        # Validar escala
        scale = max(0.3, min(2.5, scale))
        
        # ‚úÖ CORRE√á√ÉO: Ajuste autom√°tico baseado em complexidade REAL
        rows, cols = self.shape
        
        # Fator de complexidade (considera tamanho E quantidade de elementos)
        complexity_factor = (rows * cols) / 16  # Normalizado para matriz 4x4
        
        # Ajuste progressivo
        if complexity_factor > 4:  # Matrizes 8x8+
            scale *= 0.4
            logger.debug(f"Matriz muito grande ({rows}x{cols}), scale: {scale:.2f}")
        elif complexity_factor > 2:  # Matrizes 6x6 a 8x8
            scale *= 0.6
            logger.debug(f"Matriz grande ({rows}x{cols}), scale: {scale:.2f}")
        elif complexity_factor > 1:  # Matrizes 4x4 a 6x6
            scale *= 0.8
            logger.debug(f"Matriz m√©dia ({rows}x{cols}), scale: {scale:.2f}")
        # Matrizes 2x2 e 3x3 mant√™m scale original
        
        # ‚úÖ CORRE√á√ÉO: Multiplicadores POR SE√á√ÉO (mais conservadores)
        multipliers = {
            "symbolic": 1.0,      # Base
            "substituted": 0.95,  # Ligeiramente menor (n√∫meros mais longos)
            "final": 1.1          # Ligeiramente maior (resultado limpo)
        }
        
        # Calcular tamanho final
        final_scale = scale * multipliers[section]
        
        # ‚úÖ CORRE√á√ÉO: Mapeamento mais granular
        if final_scale <= 0.4:
            return r"\tiny "
        elif final_scale <= 0.55:
            return r"\scriptsize "
        elif final_scale <= 0.7:
            return r"\footnotesize "
        elif final_scale <= 0.85:
            return r"\small "
        elif final_scale <= 1.15:
            return r"\normalsize "
        elif final_scale <= 1.4:
            return r"\large "
        elif final_scale <= 1.7:
            return r"\Large "
        else:
            return r"\LARGE "


    def _format_value_smart(self, value: float, default_precision: int = 2) -> str:
        r"""
        Formata valor de forma inteligente baseado na magnitude.
        VERS√ÉO CORRIGIDA v3.1 - Prote√ß√£o contra zeros esp√∫rios
        
        Args:
            value: Valor num√©rico
            default_precision: Precis√£o padr√£o (algarismos significativos)
        
        Returns:
            str: Valor formatado
        """
        # ‚úÖ PROTE√á√ÉO CR√çTICA: Detectar valores realmente zero
        if abs(value) < 1e-15:
            return "0"
        
        # ‚úÖ PROTE√á√ÉO: Valores muito pequenos (< 0.01) ‚Üí nota√ß√£o cient√≠fica SEMPRE
        if abs(value) < 0.01:
            # Calcular expoente
            exp = int(np.floor(np.log10(abs(value))))
            mantissa = value / (10 ** exp)
            
            # Garantir mantissa leg√≠vel (n√£o arredondar para zero!)
            if abs(mantissa) < 0.1:
                exp -= 1
                mantissa = value / (10 ** exp)
            
            # Formata√ß√£o robusta
            mantissa_str = f"{mantissa:.{default_precision}f}"
            
            # Remover zeros √† direita desnecess√°rios
            mantissa_str = mantissa_str.rstrip('0').rstrip('.')
            
            return f"{mantissa_str} \\times 10^{{{exp}}}"
        
        # Valores muito grandes (>= 1000): separador de milhares
        elif abs(value) >= 1000:
            formatted = f"{value:,.{default_precision}f}"
            # Substituir v√≠rgula por espa√ßo fino LaTeX
            return formatted.replace(",", "\\,")
        
        # Valores normais (0.01 a 999.99)
        else:
            # Calcular ordem de grandeza
            magnitude = np.floor(np.log10(abs(value)))
            
            # Determinar casas decimais necess√°rias
            if magnitude >= 0:
                decimals = default_precision
            else:
                # Para valores < 1, adicionar casas extras
                decimals = min(default_precision + int(abs(magnitude)) + 1, 10)
            
            formatted = f"{value:.{decimals}f}"
            
            # Remover zeros √† direita desnecess√°rios
            if '.' in formatted:
                formatted = formatted.rstrip('0').rstrip('.')
            
            return formatted

# ============================================================================
    # VALIDA√á√ïES E TRATAMENTOS ESPECIAIS
    # ============================================================================

    def _validate_variables(self) -> Dict[str, Any]:
        """
        Valida as vari√°veis e detecta problemas comuns.
        
        Returns:
            Dict com avisos e informa√ß√µes
        """
        issues = {
            'warnings': [],
            'critical': [],
            'info': []
        }
        
        for var_name, var in self.variables.items():
            if not hasattr(var, 'value'):
                continue
            
            value = var.value
            unit = getattr(var, 'unit', '-')
            
            # Detectar valores muito pequenos (prov√°vel problema de unidade)
            if isinstance(value, (int, float)):
                if 1e-10 < abs(value) < 1e-6:
                    issues['warnings'].append(
                        f"Vari√°vel '{var_name}' = {value:.2e} {unit} "
                        f"(muito pequena, verifique unidades)"
                    )
                
                # Detectar valores zero (poss√≠vel erro)
                if value == 0:
                    issues['critical'].append(
                        f"Vari√°vel '{var_name}' = 0 (pode resultar em singularidade)"
                    )
                
                # Alertar sobre √°reas muito pequenas
                if 'A' in var_name.lower() and unit in ['m¬≤', 'm**2'] and value < 0.0001:
                    issues['info'].append(
                        f"√Årea '{var_name}' = {value} m¬≤ ({value*1e4:.2f} cm¬≤)"
                    )
        
        return issues


    def _format_substitution_safe(self, precision: int = 2) -> str:
        """
        Formata express√£o com valores substitu√≠dos de forma segura.
        
        Evita arredondamentos que transformam valores pequenos em zero.
        
        Args:
            precision: Casas decimais
        
        Returns:
            Express√£o formatada em LaTeX
        """
        import re
        from fractions import Fraction
        
        logger.info("üîß Gerando Se√ß√£o 4 com prote√ß√£o robusta contra zeros...")
        
        # ‚úÖ CRIAR DICION√ÅRIO DE SUBSTITUI√á√ÉO COM REPRESENTA√á√ÉO EXATA
        subs_dict_safe = {}
        for var_name, var in self.variables.items():
            value = var.value
            
            # ‚úÖ PROTE√á√ÉO CR√çTICA: Usar Rational (fra√ß√£o) para valores pequenos
            if isinstance(value, (int, float)):
                if abs(value) < 0.01 and value != 0:
                    # Converter para fra√ß√£o com m√°ximo denominador
                    frac = Fraction(value).limit_denominator(10000)
                    subs_dict_safe[sp.Symbol(var_name)] = sp.Rational(frac.numerator, frac.denominator)
                    logger.debug(f"  ‚úÖ {var_name}={value} ‚Üí Fra√ß√£o {frac.numerator}/{frac.denominator}")
                elif value == 0:
                    subs_dict_safe[sp.Symbol(var_name)] = 0
                else:
                    # Valores normais: usar nsimplify
                    subs_dict_safe[sp.Symbol(var_name)] = sp.nsimplify(value, rational=True)
            else:
                subs_dict_safe[sp.Symbol(var_name)] = value
        
        # ‚úÖ APLICAR SUBSTITUI√á√ÉO COM REPRESENTA√á√ÉO EXATA
        substitute_expr_raw = self.symbolic.xreplace(subs_dict_safe)
        
        # ‚úÖ CONVERTER PARA LATEX COM CONFIGURA√á√ïES ROBUSTAS
        latex_substituted = sp.latex(substitute_expr_raw, mul_symbol='\\times')
        
        # ‚úÖ VALIDA√á√ÉO FINAL: DETECTAR ZEROS ESP√öRIOS
        if re.search(r'0\.0+\s*\\times', latex_substituted):
            logger.critical("‚ùå ZERO ESP√öRIO DETECTADO! Acionando protocolo de emerg√™ncia...")
            
            # Recalcular for√ßando nsimplify em TUDO
            subs_dict_exact = {}
            for var_name, var in self.variables.items():
                value = var.value
                if isinstance(value, (int, float)):
                    subs_dict_exact[sp.Symbol(var_name)] = sp.nsimplify(value, rational=True)
                else:
                    subs_dict_exact[sp.Symbol(var_name)] = value
            
            substitute_expr_raw = self.symbolic.xreplace(subs_dict_exact)
            latex_substituted = sp.latex(substitute_expr_raw, mul_symbol='\\times')
            
            logger.info(f"‚úÖ Recalculado com sucesso!")
        
        md += f"""## 4. Express√£o com Valores Substitu√≠dos

Antes da simplifica√ß√£o num√©rica:

$$
{self.name} = \\large \\left[{latex_substituted}\\right]
$$

"""
        
        logger.info(f"‚úÖ Se√ß√£o 4 gerada com prote√ß√£o robusta contra zeros")



    # ============================================================================
    # MELHORIAS NA FUN√á√ÉO export_memorial
    # ============================================================================

    # Encontre a fun√ß√£o export_memorial e SUBSTITUA a Se√ß√£o 4 por:

    def _generate_section_4_improved(self, precision: int = 2) -> str:
        """
        Gera Se√ß√£o 4 com prote√ß√£o para valores pequenos.
        
        Se√ß√£o 4: Express√£o com Valores Substitu√≠dos
        """
        # Validar vari√°veis
        issues = self._validate_variables()
        
        # Criar aviso se houver problemas
        warning_section = ""
        if issues['critical']:
            warning_section = "\n‚ö†Ô∏è **AVISOS CR√çTICOS**:\n\n"
            for msg in issues['critical']:
                warning_section += f"- {msg}\n"
            warning_section += "\n"
        
        if issues['warnings']:
            warning_section += "\nüìå **Aten√ß√£o**:\n\n"
            for msg in issues['warnings']:
                warning_section += f"- {msg}\n"
            warning_section += "\n"
        
        # Usar formata√ß√£o segura
        latex_expr = self._format_substitution_safe(precision)
        
        section = f"""## 4. Express√£o com Valores Substitu√≠dos

{warning_section}Antes da simplifica√ß√£o num√©rica:

$$
{self.name} = \\large \\left[{latex_expr}\\right]
$$

"""
        return section




    def _safe_format_variable(self, var, precision: int = 2) -> str:
        """
        Formata vari√°vel de forma segura, protegendo valores pequenos.
        """
        if not hasattr(var, 'value'):
            return str(var)
        
        value = var.value
        
        # Se valor muito pequeno, usar nota√ß√£o cient√≠fica
        if isinstance(value, float) and 0 < abs(value) < 0.01:
            # For√ßar nota√ß√£o cient√≠fica
            if value == int(value):
                return f"{int(value)}"
            else:
                # Usar mais casas decimais para valores pequenos
                return f"{value:.6g}"  # 6 algarismos significativos
        
        # Caso normal
        return f"{value:.{precision}f}"



    def export_memorial(self, 
                       filename: str = None,
                       title: str = None,
                       project: str = "Projeto de Estruturas",
                       author: str = "Engenheiro Respons√°vel",
                       number_format: str = "engineering",
                       precision: int = 2,
                       show_detailed_calcs: bool = True,
                       show_properties: bool = True,
                       step_detail: str = "basic",
                       matrix_scale: float = 1.5) -> str:  # ‚Üê ADICIONAR AQUI
        """
        Exporta memorial de c√°lculo completo automaticamente.
        
        Args:
            filename: Nome do arquivo (default: auto-gerado)
            title: T√≠tulo do memorial
            project: Nome do projeto
            author: Respons√°vel t√©cnico
            number_format: "engineering", "decimal", "scientific"
            precision: Casas decimais (default: 2)
            show_detailed_calcs: Incluir Se√ß√£o 4
            show_properties: Incluir propriedades da matriz
            step_detail: "basic" (padr√£o) ou "detailed"
            matrix_scale: Multiplicador de tamanho (0.5 a 2.0, padr√£o=1.0)
        
        Returns:
            str: Caminho do arquivo gerado
        """

        from datetime import datetime
        import sympy as sp_module
        
        logger.info(f"üöÄ Iniciando gera√ß√£o de memorial (n√≠vel: {step_detail})...")
        
        # Validar step_detail
        if step_detail not in ["basic", "detailed"]:
            logger.warning(f"step_detail='{step_detail}' inv√°lido. Usando 'basic'")
            step_detail = "basic"
        
        # Gerar filename
        if filename is None:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"memorial_{self.name}_{timestamp}.md"
        
        if title is None:
            title = f"Memorial de C√°lculo - Matriz {self.name}"
        
        # Obter resultado
        steps = self.steps()
        numeric_result = self.evaluate()
        
        md = []
        
        # CABE√áALHO
        md.append(f"# {title}\n\n")
        md.append("---\n\n")
        md.append(f"**Projeto**: {project}\n\n")
        md.append(f"**Respons√°vel**: {author}\n\n")
        md.append(f"**Data**: {datetime.now().strftime('%d/%m/%Y √†s %H:%M')}\n\n")
        md.append(f"**Matriz**: {self.name}\n\n")
        md.append(f"**Dimens√£o**: {self.shape[0]}√ó{self.shape[1]}\n\n")
        md.append("---\n\n")
        
        # 1. DADOS DE ENTRADA
        # ====================================================================
        # 1. DADOS DE ENTRADA
        # ====================================================================
        
        md.append("## 1. Dados de Entrada\n\n")
        md.append("| Vari√°vel | Valor | Unidade |\n")
        md.append("|----------|-------|----------|\n")
        
        for var_name, var in self.variables.items():
            unit = getattr(var, 'unit', '') or '-'
            # USAR FORMATA√á√ÉO INTELIGENTE
            val_str = self._format_value_smart(var.value, precision)
            md.append(f"| ${var_name}$ | {val_str} | {unit} |\n")

        
        md.append("\n---\n\n")
        
        # ====================================================================
        # 2. MATRIZ SIMB√ìLICA
        # ====================================================================
        
        md.append("## 2. Matriz Simb√≥lica\n\n")
        md.append("Express√£o geral da matriz:\n\n")
        
        symbolic_step = next((s for s in steps if s.get('operation') == 'symbolic'), None)
        
        # USAR TAMANHO PROPORCIONAL
        size_cmd = self._get_matrix_size_command("symbolic", matrix_scale)
        
        if symbolic_step and 'latex' in symbolic_step:
            md.append("$$\n")
            md.append(f"{self.name} = {size_cmd}{symbolic_step['latex']}\n")
            md.append("$$\n\n")
        else:
            md.append("$$\n")
            md.append(f"{self.name} = {size_cmd}{sp_module.latex(self._symbolic_matrix)}\n")
            md.append("$$\n\n")

        
        # ====================================================================
        # 3. SUBSTITUI√á√ÉO DE VALORES (CORRIGIDO)
        # ====================================================================
        
        md.append("## 3. Substitui√ß√£o de Valores\n\n")
        md.append("Substituindo os valores das vari√°veis:\n\n")
        
        for var_name, var in self.variables.items():
            # ‚úÖ CORRE√á√ÉO: Usar formata√ß√£o inteligente
            val_str = self._format_value_smart(var.value, precision)
            
            # ‚úÖ CORRE√á√ÉO: Renderizar unidade corretamente
            unit = getattr(var, 'unit', '')
            
            # Formatar unidade para LaTeX
            if unit and unit != '-':
                # Substituir ** por ^
                unit_latex = unit.replace('**', '^')
                
                # Envolver em \text{} para renderiza√ß√£o correta
                unit_str = f" \\, \\text{{{unit_latex}}}"
            else:
                unit_str = ""
            
            # ‚úÖ CORRE√á√ÉO: Exibi√ß√£o com tamanho adequado
            md.append(f"$$\\large {var_name} = {val_str}{unit_str}$$\n\n")
        
        md.append("---\n\n")
        
        # 4. EXPRESS√ÉO COM VALORES SUBSTITU√çDOS
        if show_detailed_calcs:
            md.append("## 4. Express√£o com Valores Substitu√≠dos\n\n")
            md.append("Antes da simplifica√ß√£o num√©rica:\n\n")
            
            logger.info("Gerando Se√ß√£o 4...")
            
            inter_latex = self._create_latex_from_scratch()
            
            has_symbols = any(var_name in inter_latex for var_name in self.variables.keys())
            if has_symbols:
                logger.warning("S√≠mbolos detectados, usando num√©rico puro")
                inter_latex = self._create_numeric_only_latex()
            
            inter_latex = inter_latex.replace(r'\\', r'\\[1.5em]')
            
            # USAR TAMANHO PROPORCIONAL
            size_cmd = self._get_matrix_size_command("substituted", matrix_scale)
            
            md.append("$$\n")
            md.append(f"{self.name} = {size_cmd}{inter_latex}\n")
            md.append("$$\n\n")

        
        # 5. RESULTADO FINAL
        md.append("## 5. Resultado Final\n\n")
        md.append("Matriz num√©rica simplificada:\n\n")
        
        logger.info("Gerando Se√ß√£o 5...")
        
        latex_result = self._matrix_to_latex(numeric_result, mode=number_format, precision=precision)
        latex_result = latex_result.replace(r'\\', r'\\[0.8em]')
        
        # USAR TAMANHO PROPORCIONAL
        size_cmd = self._get_matrix_size_command("final", matrix_scale)
        
        md.append("$$\n")
        md.append(f"{self.name} = {size_cmd}{latex_result}\n")
        md.append("$$\n\n")

        
        logger.info("‚úÖ Matriz num√©rica gerada")
        rows, cols = self.shape
        # ELEMENTOS DA MATRIZ (somente se detailed)
        if step_detail == "detailed":
            md.append("### Elementos da Matriz\n\n")
            
            for i in range(rows):
                for j in range(cols):
                    elem_val = numeric_result[i, j]
                    
                    if abs(elem_val) < 1e-10:
                        eng_notation = "0"
                    else:
                        exp = int(np.floor(np.log10(abs(elem_val)) / 3) * 3)
                        mantissa = elem_val / (10 ** exp)
                        
                        if exp == 0:
                            eng_notation = f"{mantissa:.2f}"
                        else:
                            eng_notation = f"{mantissa:.2f} \\times 10^{{{exp}}}"
                    
                    md.append(f"- **{self.name}[{i+1},{j+1}]** = ${eng_notation}$\n")
            
            md.append("\n")
        
        # VALORES EM NOTA√á√ÉO SIMPLIFICADA
        max_val = np.max(np.abs(numeric_result))
        if max_val > 1e6:
            md.append("### Valores em Nota√ß√£o Simplificada\n\n")
            md.append("Para facilitar leitura, os valores acima est√£o em nota√ß√£o de engenharia.\n\n")
            md.append("**Exemplo**: $5.83 \\times 10^{7}$ significa $58\\,300\\,000$\n\n")
        
        # PROPRIEDADES DA MATRIZ
        if show_properties:
            md.append("### Propriedades da Matriz\n\n")
            
            md.append(f"- **Sim√©trica**: {'‚úÖ Sim' if np.allclose(numeric_result, numeric_result.T) else '‚ùå N√£o'}\n")
            
            if self.is_square:
                det = np.linalg.det(numeric_result)
                det_str = f"{det:.2e}" if abs(det) > 1e6 or abs(det) < 1e-3 else f"{det:.2f}"
                md.append(f"- **Determinante**: {det_str}\n")
                
                eigs = np.linalg.eigvals(numeric_result)
                md.append(f"- **Definida Positiva**: {'‚úÖ Sim' if np.all(eigs > 0) else '‚ùå N√£o'}\n")
                
                cond = np.linalg.cond(numeric_result)
                md.append(f"- **N√∫mero de Condi√ß√£o**: {cond:.2e}\n")
        
        md.append("\n---\n\n")
        md.append("_Gerado automaticamente por PyMemorial Matrix v2.2.2_\n")
        
        # SALVAR
        with open(filename, 'w', encoding='utf-8') as f:
            f.write(''.join(md))
        
        logger.info(f"‚úÖ Memorial exportado: {filename}")
        return filename




    def _matrix_to_latex(self, arr: np.ndarray, mode: str = "auto", precision: int = 2, 
                          size: str = "auto") -> str:
        """
        Converte array para LaTeX com formata√ß√£o profissional e tamanho din√¢mico.
        VERS√ÉO CORRIGIDA v3.1 - Formata√ß√£o robusta de valores pequenos
        
        Args:
            arr: NumPy array
            mode: "auto", "decimal", "engineering", "scientific", "fraction"
            precision: Casas decimais
            size: "auto", "small", "normal", "large"
        
        Returns:
            str: LaTeX formatado
        """
        if arr.ndim != 2:
            return str(arr)
        
        rows, cols = arr.shape
        
        # ========================================================================
        # DETERMINAR TAMANHO AUTOMATICAMENTE
        # ========================================================================
        
        if size == "auto":
            complexity = (rows * cols) / 16
            
            if rows <= 2 and cols <= 2:
                size_modifier = r"\normalsize "
            elif rows <= 3 and cols <= 3:
                size_modifier = r"\small "
            elif rows <= 4 and cols <= 4:
                size_modifier = r"\footnotesize "
            elif rows <= 6 and cols <= 6:
                size_modifier = r"\scriptsize "
            else:
                size_modifier = r"\tiny "
        else:
            size_map = {
                "tiny": r"\tiny ",
                "scriptsize": r"\scriptsize ",
                "footnotesize": r"\footnotesize ",
                "small": r"\small ",
                "normal": r"\normalsize ",
                "large": r"\large ",
                "Large": r"\Large "
            }
            size_modifier = size_map.get(size, "")
        
        # ========================================================================
        # DETERMINAR FORMATO DOS N√öMEROS
        # ========================================================================
        
        if mode == "auto":
            max_val = np.max(np.abs(arr))
            min_val = np.min(np.abs(arr[arr != 0])) if np.any(arr != 0) else 1
            
            # ‚úÖ CORRE√á√ÉO: Crit√©rio mais sens√≠vel
            if max_val > 1e6 or (min_val < 0.01 and min_val != 0):
                mode = "engineering"
            else:
                mode = "decimal"
        
        # ========================================================================
        # GERAR LATEX
        # ========================================================================
        
        if rows > 4 or cols > 4:
            env_start = r"\left[\begin{array}{" + "c" * cols + "}\n"
            env_end = r"\end{array}\right]"
        else:
            env_start = r"\begin{bmatrix}" + "\n"
            env_end = r"\end{bmatrix}"
        
        latex = size_modifier + env_start
        
        for i in range(rows):
            row_elements = []
            for j in range(cols):
                val = arr[i, j]
                
                # ‚úÖ CORRE√á√ÉO: Usar _format_value_smart para TODOS os valores
                if mode == "decimal":
                    if abs(val) < 1e-15:
                        row_elements.append("0")
                    else:
                        formatted = self._format_value_smart(val, precision)
                        row_elements.append(formatted)
                        
                elif mode == "engineering":
                    if abs(val) < 1e-15:
                        row_elements.append("0")
                    else:
                        exp = int(np.floor(np.log10(abs(val)) / 3) * 3)
                        mantissa = val / (10 ** exp)
                        
                        if exp == 0:
                            formatted = self._format_value_smart(mantissa, precision)
                            row_elements.append(formatted)
                        else:
                            mantissa_str = f"{mantissa:.{precision}f}".rstrip('0').rstrip('.')
                            row_elements.append(f"{mantissa_str} \\times 10^{{{exp}}}")
                        
                elif mode == "scientific":
                    if abs(val) < 1e-15:
                        row_elements.append("0")
                    else:
                        formatted = f"{val:.{precision}e}".replace("e+", r" \times 10^{")
                        formatted = formatted.replace("e-", r" \times 10^{-") + "}"
                        row_elements.append(formatted)
            
            latex += "  " + " & ".join(row_elements)
            if i < rows - 1:
                latex += r" \\" + "\n"
        
        latex += "\n" + env_end
        return latex


    def _format_intermediate_step(self, step_latex: str) -> str:
        """
        Formata step intermedi√°rio com VALORES NUM√âRICOS substitu√≠dos.
        VERS√ÉO FINAL - For√ßa avalia√ß√£o parcial.
        """
        import sympy as sp_module
        from sympy import N as sp_N
        
        if not hasattr(self, '_symbolic_matrix') or self._symbolic_matrix is None:
            logger.warning("Matriz simb√≥lica n√£o dispon√≠vel")
            return step_latex
        
        try:
            # ================================================================
            # SOLU√á√ÉO: Substituir E depois converter para Float explicitamente
            # ================================================================
            
            # 1. Criar dicion√°rio de substitui√ß√£o com valores Float
            subs_dict = {}
            for var_name, var in self.variables.items():
                if var.value is not None:
                    sym = sp_module.Symbol(var_name)
                    # Usar Float com precis√£o limitada
                    subs_dict[sym] = sp_module.Float(var.value, precision=10)
            
            logger.debug(f"Substituindo: {subs_dict}")
            
            # 2. Substituir valores
            matrix_with_values = self._symbolic_matrix.subs(subs_dict)
            
            # 3. **CR√çTICO**: For√ßar avalia√ß√£o num√©rica parcial
            # Isso converte E*I em 21000.0*50000.0 mas mant√©m estrutura de fra√ß√£o
            matrix_evaluated = sp_module.Matrix([
                [sp_module.nsimplify(elem, rational=False) for elem in row]
                for row in matrix_with_values.tolist()
            ])
            
            # 4. Gerar LaTeX SEM fold (mant√©m opera√ß√µes expl√≠citas)
            from sympy import latex as sp_latex
            
            latex_output = sp_latex(
                matrix_with_values,  # Usar matriz com valores
                fold_short_frac=False,
                mul_symbol='times',
                fold_func_brackets=False
            )
            
            # 5. P√≥s-processamento
            latex_output = latex_output.replace(r'\cdot', r' \times ')
            
            # 6. Valida√ß√£o RIGOROSA
            # Deve conter pelo menos um dos valores das vari√°veis
            has_values = False
            for var in self.variables.values():
                if var.value and str(var.value) in latex_output.replace('.0', ''):
                    has_values = True
                    break
            
            if not has_values or not any(char.isdigit() for char in latex_output):
                logger.error(f"‚ùå Substitui√ß√£o AINDA falhou! Output: {latex_output[:100]}")
                # Tentar m√©todo bruto
                return self._create_latex_from_scratch()
            
            logger.info(f"‚úÖ Substitui√ß√£o OK: {latex_output[:80]}...")
            return latex_output
            
        except Exception as e:
            logger.error(f"Erro em _format_intermediate_step: {e}")
            import traceback
            logger.debug(traceback.format_exc())
            return self._create_latex_from_scratch()



    
    
    def _convert_negative_powers_to_fractions(self, latex_str: str) -> str:
        """
        Converte pot√™ncias negativas em fra√ß√µes.
        12*21000*50000*(6.0)^{-3} ‚Üí \frac{12*21000*50000}{6.0^{3}}
        """
        import re
        
        # Padr√£o complexo: express√£o * base^{-exp}
        # Captura tudo antes da pot√™ncia negativa e converte em fra√ß√£o
        
        # Estrat√©gia: processar cada elemento da matriz separadamente
        # Split por & e \\ para pegar elementos individuais
        
        def convert_element(elem: str) -> str:
            """Converte um elemento individual da matriz"""
            elem = elem.strip()
            
            # Padr√£o: qualquer_coisa * (base)^{-exp}
            # Ou: qualquer_coisa * base^{-exp}
            pattern = r'(.+?)\s*\*?\s*[\{(]?([0-9.]+)[\})]?\^\{-(\d+)\}'
            
            match = re.search(pattern, elem)
            if match:
                numerator = match.group(1).strip()
                base = match.group(2)
                exp = match.group(3)
                
                # Remover multiplica√ß√£o final do numerador se existir
                numerator = numerator.rstrip(' *')
                
                if exp == "1":
                    return f"\\frac{{{numerator}}}{{{base}}}"
                else:
                    return f"\\frac{{{numerator}}}{{{base}^{{{exp}}}}}"
            
            return elem
        
        # Processar matriz
        # Dividir por linhas (\\)
        lines = latex_str.split(r'\\')
        converted_lines = []
        
        for line in lines:
            # Dividir por elementos (&)
            elements = line.split('&')
            converted_elements = [convert_element(e) for e in elements]
            converted_lines.append(' & '.join(converted_elements))
        
        result = r' \\' + '\n'.join(converted_lines) if len(converted_lines) > 1 else converted_lines[0]
        
        return result
    
    
    def _fallback_format_intermediate(self, step_latex: str) -> str:
        """
        Fallback: tenta extrair valores do step original.
        """
        import re
        
        # Se step_latex estiver vazio ou inv√°lido, tentar gerar do zero
        if not step_latex or len(step_latex) < 10:
            logger.warning("Step intermedi√°rio vazio, gerando do zero...")
            return self._format_intermediate_step("")
        
        # Converter pot√™ncias negativas simples
        # {6.0}^{-3} ‚Üí \frac{1}{6.0^{3}}
        pattern = r'\{([0-9.]+)\}\^\{-(\d+)\}'
        
        def replace_neg_power(match):
            base = match.group(1)
            exp = match.group(2)
            if exp == "1":
                return f"\\frac{{1}}{{{base}}}"
            else:
                return f"\\frac{{1}}{{{base}^{{{exp}}}}}"
        
        step_latex = re.sub(pattern, replace_neg_power, step_latex)
        
        # Remover par√™nteses desnecess√°rios
        step_latex = step_latex.replace("{{", "{").replace("}}", "}")
        
        return step_latex



    def _fallback_format_intermediate(self, step_latex: str) -> str:
        """
        Fallback: Converte pot√™ncias negativas usando regex.
        """
        import re
        
        # Padr√£o 1: {n√∫mero}^{-expoente} ‚Üí \frac{1}{n√∫mero^{expoente}}
        pattern1 = r'\{([0-9.]+)\}\^\{-(\d+)\}'
        
        def replace_neg_power(match):
            base = match.group(1)
            exp = match.group(2)
            if exp == "1":
                return f"\\frac{{1}}{{{base}}}"
            else:
                return f"\\frac{{1}}{{{base}^{{{exp}}}}}"
        
        step_latex = re.sub(pattern1, replace_neg_power, step_latex)
        
        # Padr√£o 2: (n√∫mero)^{-expoente} ‚Üí \frac{1}{n√∫mero^{expoente}}
        pattern2 = r'\(([0-9.]+)\)\^\{-(\d+)\}'
        step_latex = re.sub(pattern2, replace_neg_power, step_latex)
        
        # Remover par√™nteses duplos
        step_latex = step_latex.replace("{{", "{").replace("}}", "}")
        
        # Substituir \cdot por \times
        step_latex = step_latex.replace(r'\cdot', r'\times')
        
        return step_latex


    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> 'Matrix':
        """
        Desserializa matriz de dicion√°rio.
        
        Args:
            data: Dicion√°rio com dados da matriz
            
        Returns:
            Matrix: Nova inst√¢ncia
        """
        variables = {}
        if 'variables' in data:
            for name, var_data in data['variables'].items():
                variables[name] = Variable(name, var_data.get('value'))
        
        return cls(
            data=data['data'],
            variables=variables,
            description=data.get('description', ''),
            name=data.get('name', 'M')
        )

    def __eq__(self, other: 'Matrix') -> bool:
        """Compara√ß√£o robusta de matrizes."""
        if not isinstance(other, Matrix):
            return False
        
        if self.shape != other.shape:
            return False
        
        try:
            self_num = self.evaluate(use_cache=True)
            other_num = other.evaluate(use_cache=True)
            return np.allclose(self_num, other_num, rtol=1e-9, atol=1e-12)
        except:
            return False

    def __repr__(self) -> str:
        """Representa√ß√£o melhorada."""
        props = []
        if self.is_symbolic:
            props.append("symbolic")
        if self.is_square:
            props.append("square")
        if self._properties_cache.get('is_symmetric'):
            props.append("symmetric")
        
        props_str = f" [{', '.join(props)}]" if props else ""
        return f"Matrix('{self.name}', {self.shape}{props_str})"

    # ========================================================================
    # AVALIA√á√ÉO (COMPAT√çVEL COM v2.1.9)
    # ========================================================================

    def evaluate(self, use_cache: bool = True) -> np.ndarray:
        """
        Avalia a matriz para a forma num√©rica.
        COMPAT√çVEL com v2.1.9
        """
        if use_cache and self._numeric_matrix is not None:
            return self._numeric_matrix
        
        if self._numeric_matrix is not None:
            return self._numeric_matrix
        
        if self._symbolic_matrix is not None:
            result = self._evaluate_symbolic_lambdify()
            self._numeric_matrix = result
            return result
        
        raise ValueError("Nenhum dado de matriz para avaliar")

    def _evaluate_symbolic_lambdify(self) -> np.ndarray:
        """
        Avaliar matriz com lambdify.
        COMPAT√çVEL com v2.1.9
        """
        logger.debug(f"Avaliando '{self.name}' com sp.lambdify...")
        
        expr_matrix = self._symbolic_matrix
        if expr_matrix is None:
            raise ValueError("Matriz simb√≥lica n√£o foi parseada.")
        
        free_symbols = expr_matrix.free_symbols
        symbols_tuple = tuple(free_symbols)
        
        subs_values = {}
        missing_vars = []
        
        # ‚úÖ CORRE√á√ÉO: Definir variables_source ANTES de usar
        variables_source = getattr(self, '_original_variables', self.variables)
        
        for sym in symbols_tuple:
            var_name = str(sym)
            if var_name not in variables_source:
                missing_vars.append(var_name)
                continue
            
            var = variables_source[var_name]
            if var.value is None:
                missing_vars.append(f"{var_name} (s√≠mbolo sem valor)")
                continue
            
            subs_values[var_name] = strip_units(var.value)
        
        if missing_vars:
            raise ValueError(
                f"Vari√°veis ausentes para avaliar '{self.name}': {', '.join(missing_vars)}"
            )
        
        try:
            func = sp.lambdify(symbols_tuple, expr_matrix, 'numpy')
        except Exception as e:
            logger.error(f"Falha ao 'lambdify' a matriz '{self.name}': {e}")
            raise RuntimeError(f"Erro ao compilar matriz para NumPy: {e}")
        
        try:
            args = [subs_values[str(sym)] for sym in symbols_tuple]
            result_array = np.asarray(func(*args), dtype=float)
            logger.debug(f"Matriz '{self.name}' avaliada com sucesso via lambdify.")
            return result_array
        except Exception as e:
            logger.error(f"Falha ao executar lambdify para '{self.name}': {e}")
            raise RuntimeError(f"Erro ao calcular matriz num√©rica: {e}")


    # ========================================================================
    # STEPS (COMPAT√çVEL COM v2.1.9)
    # ========================================================================

    def steps(
        self,
        operation: Optional[str] = None,
        show_units: bool = True
    ) -> List[Dict[str, Any]]:
        """
        Gera steps com passo intermedi√°rio.
        COMPAT√çVEL com v2.1.9 (sem granularity)
        """
        steps = []
        
        subs_dict_display = {}
        subs_list_display = []
        
        try:
            if self.is_symbolic and self._symbolic_matrix:
                for sym in self._symbolic_matrix.free_symbols:
                    var_name = str(sym)
                    if var_name in self.variables:
                        var = self.variables[var_name]
                        if var.value is not None:
                            val_numeric = strip_units(var.value)
                            subs_dict_display[sym] = sp.Float(val_numeric)
                            
                            if PINT_OK and hasattr(var.value, 'units'):
                                subs_list_display.append(f"{var_name} = {var.value:~P}")
                            else:
                                subs_list_display.append(f"{var_name} = {val_numeric}")
            
            # PASSO 1: Defini√ß√£o
            steps.append({
                'step': 'Defini√ß√£o da matriz',
                'operation': 'definition',
                'description': f'{self.name}: matriz {self.shape[0]}√ó{self.shape[1]}',
                'shape': self.shape,
                'is_symbolic': self.is_symbolic
            })
            
            # PASSO 2: Forma Simb√≥lica
            if self.is_symbolic and self._symbolic_matrix is not None:
                steps.append({
                    'step': 'Forma Simb√≥lica',
                    'operation': 'symbolic',
                    'description': 'Express√£o simb√≥lica da matriz',
                    'latex': sp_latex(self._symbolic_matrix)
                })
            
            # PASSO 3: Substitui√ß√£o
            if subs_list_display:
                steps.append({
                    'step': 'Substitui√ß√£o de Vari√°veis',
                    'operation': 'substitution',
                    'description': ', '.join(subs_list_display)
                })
            
            # PASSO 4: Intermedi√°rio
            if self.is_symbolic and subs_dict_display:
                try:
                    rows, cols = self._symbolic_matrix.shape
                    intermediate_elements = []
                    
                    for i in range(rows):
                        row_elements = []
                        for j in range(cols):
                            original_elem = self._symbolic_matrix[i, j]
                            unevaluated = self._substitute_preserve_structure(
                                original_elem, 
                                subs_dict_display
                            )
                            row_elements.append(unevaluated)
                        intermediate_elements.append(row_elements)
                    
                    intermediate_matrix = SpMatrix(intermediate_elements)
                    
                    steps.append({
                        'step': 'Matriz Substitu√≠da (Passo Intermedi√°rio)',
                        'operation': 'intermediate',
                        'description': 'Valores substitu√≠dos, estrutura preservada',
                        'latex': sp_latex(intermediate_matrix)
                    })
                    
                except Exception as e:
                    logger.warning(f"Falha ao gerar passo intermedi√°rio: {e}")
            
            # PASSO 5: Resultado
            try:
                result_matrix = self.evaluate(use_cache=True)
                
                if result_matrix.shape[0] <= 8 and result_matrix.shape[1] <= 8:
                    matrix_display = result_matrix.tolist()
                else:
                    matrix_display = f"{result_matrix.shape[0]}√ó{result_matrix.shape[1]} (matriz grande)"
                
                steps.append({
                    'step': 'Matriz Num√©rica (Resultado)',
                    'operation': 'evaluation',
                    'description': 'Avalia√ß√£o num√©rica final',
                    'matrix': matrix_display
                })
            
            except Exception as e:
                logger.warning(f"N√£o foi poss√≠vel avaliar '{self.name}': {e}")
                steps.append({
                    'step': 'Avalia√ß√£o Num√©rica',
                    'operation': 'evaluation_failed',
                    'description': 'N√£o foi poss√≠vel avaliar',
                    'error': str(e)
                })
            
            return steps
        
        except Exception as e:
            logger.error(f"Falha ao gerar steps: {e}")
            return [{
                'step': 'Erro',
                'operation': 'error',
                'description': f'Erro ao gerar steps: {e}'
            }]

    def _substitute_preserve_structure(self, expr: sp.Expr, subs_dict: Dict) -> sp.Expr:
        """
        Substitui s√≠mbolos preservando estrutura.
        COMPAT√çVEL com v2.1.9
        """
        from sympy import Mul, Add, Pow, Number
        from sympy.core.expr import UnevaluatedExpr
        
        if expr.is_Number:
            return expr
        
        if expr.is_Symbol:
            if expr in subs_dict:
                return UnevaluatedExpr(subs_dict[expr])
            return expr
        
        if isinstance(expr, Mul):
            new_args = [self._substitute_preserve_structure(arg, subs_dict) 
                       for arg in expr.args]
            return Mul(*new_args, evaluate=False)
        
        elif isinstance(expr, Add):
            new_args = [self._substitute_preserve_structure(arg, subs_dict) 
                       for arg in expr.args]
            return Add(*new_args, evaluate=False)
        
        elif isinstance(expr, Pow):
            new_base = self._substitute_preserve_structure(expr.base, subs_dict)
            new_exp = self._substitute_preserve_structure(expr.exp, subs_dict)
            return Pow(new_base, new_exp, evaluate=False)
        
        else:
            return expr.subs(subs_dict, simultaneous=True, evaluate=False)

    def _compute_properties(self, matrix: np.ndarray) -> Dict[str, Any]:
        """Computa propriedades da matriz."""
        props = {'shape': self.shape, 'is_square': self.is_square}
        
        if self.is_square and NUMPY_AVAILABLE:
            try:
                props['determinant'] = float(np.linalg.det(matrix))
                props['trace'] = float(np.trace(matrix))
                props['rank'] = int(np.linalg.matrix_rank(matrix))
                props['is_symmetric'] = bool(np.allclose(matrix, matrix.T))
            except Exception as e:
                logger.warning(f"N√£o p√¥de computar todas as propriedades: {e}")
        
        return props


# ============================================================================
# MODULE INFO
# ============================================================================

MATRIX_AVAILABLE = NUMPY_AVAILABLE and SYMPY_AVAILABLE

if MATRIX_AVAILABLE:
    logger.info(f"‚úÖ Matrix module (Enhanced v2.2.0) dispon√≠vel (NumPy, SymPy)")
else:
    reasons = []
    if not NUMPY_AVAILABLE: reasons.append("NumPy indispon√≠vel")
    if not SYMPY_AVAILABLE: reasons.append("SymPy indispon√≠vel")
    logger.critical(f"‚ùå Matrix module indispon√≠vel: {', '.join(reasons)}")

__all__ = [
    'Matrix',
    'MatrixType',
    'MATRIX_AVAILABLE',
    'NUMPY_AVAILABLE',
    'SYMPY_AVAILABLE',
    'debug_matrix_parsing',
]

__version__ = "2.2.0"


# ============================================================================
# FUN√á√ïES AUXILIARES PARA DEBUGGING (APRIMORADAS)
# ============================================================================

def debug_matrix_parsing(
    expr_str: str, 
    variables: Dict[str, Variable],
    verbose: bool = True
) -> Dict[str, Any]:
    """
    Fun√ß√£o auxiliar aprimorada para debug do parsing de matrizes.
    
    Args:
        expr_str: Express√£o da matriz como string
        variables: Dicion√°rio de vari√°veis
        verbose: Se True, imprime informa√ß√µes detalhadas
    
    Returns:
        Dict com informa√ß√µes de debug completas
    """
    if not SYMPY_AVAILABLE:
        return {'error': 'SymPy n√£o dispon√≠vel', 'success': False}
    
    info = {
        'input_expr': expr_str,
        'expr_length': len(expr_str),
        'variables_provided': list(variables.keys()),
        'variables_count': len(variables),
        'parsing_steps': [],
        'warnings': [],
        'success': False
    }
    
    try:
        # Criar s√≠mbolos
        local_dict = {}
        for var_name in variables.keys():
            local_dict[var_name] = sp.Symbol(var_name, real=True, positive=True)
        info['parsing_steps'].append(f"‚úÖ S√≠mbolos criados: {list(local_dict.keys())}")
        
        # Parse com evaluate=False
        parsed_expr = sp.sympify(
            expr_str, 
            locals=local_dict, 
            evaluate=False, 
            rational=False
        )
        info['parsing_steps'].append(f"‚úÖ Parsed type: {type(parsed_expr).__name__}")
        
        # Converter para matriz se necess√°rio
        if isinstance(parsed_expr, list):
            parsed_expr = SpMatrix(parsed_expr)
            info['parsing_steps'].append("‚úÖ Convertido lista ‚Üí SpMatrix")
        
        # Verificar s√≠mbolos livres
        if hasattr(parsed_expr, 'free_symbols'):
            free_syms = [str(s) for s in parsed_expr.free_symbols]
            info['free_symbols'] = free_syms
            info['parsing_steps'].append(f"‚úÖ S√≠mbolos livres detectados: {free_syms}")
            
            # Verificar s√≠mbolos n√£o declarados
            undeclared = set(free_syms) - set(variables.keys())
            if undeclared:
                info['warnings'].append(f"‚ö†Ô∏è S√≠mbolos n√£o declarados: {undeclared}")
        
        # Verificar shape
        if hasattr(parsed_expr, 'shape'):
            info['shape'] = parsed_expr.shape
            info['parsing_steps'].append(f"‚úÖ Shape: {parsed_expr.shape}")
        
        # LaTeX
        info['latex'] = sp_latex(parsed_expr)
        info['latex_length'] = len(info['latex'])
        info['parsing_steps'].append(f"‚úÖ LaTeX gerado ({info['latex_length']} chars)")
        
        # Valida√ß√£o de pureza
        latex_output = info['latex']
        contaminated = []
        for var_name, var in variables.items():
            if var.value is not None:
                value_str = str(strip_units(var.value))
                pattern = r'(?<!\d)' + re.escape(value_str) + r'(?!\d)'
                if re.search(pattern, latex_output):
                    contaminated.append(f"{var_name}={value_str}")
        
        if contaminated:
            info['warnings'].append(f"‚ö†Ô∏è Poss√≠vel contamina√ß√£o detectada: {contaminated}")
            info['parsing_steps'].append("‚ö†Ô∏è ATEN√á√ÉO: Contamina√ß√£o num√©rica detectada")
        else:
            info['parsing_steps'].append("‚úÖ Pureza simb√≥lica validada")
        
        info['success'] = True
        info['parsing_steps'].append("‚úÖ Parsing completo com sucesso")
        
    except Exception as e:
        info['error'] = str(e)
        info['error_type'] = type(e).__name__
        info['traceback'] = traceback.format_exc()
        info['parsing_steps'].append(f"‚ùå Erro: {e}")
        info['success'] = False
    
    # Output verbose
    if verbose:
        print("\n" + "="*70)
        print("üîç DEBUG MATRIX PARSING")
        print("="*70)
        print(f"üìù Express√£o: {expr_str[:100]}{'...' if len(expr_str) > 100 else ''}")
        print(f"üìä Vari√°veis: {list(variables.keys())}")
        print("\nüìã Steps:")
        for step in info['parsing_steps']:
            print(f"  {step}")
        
        if info['warnings']:
            print("\n‚ö†Ô∏è  Warnings:")
            for warning in info['warnings']:
                print(f"  {warning}")
        
        if info.get('error'):
            print(f"\n‚ùå Erro: {info['error']}")
        
        print("\n" + "="*70)
        print(f"Resultado: {'‚úÖ SUCESSO' if info['success'] else '‚ùå FALHA'}")
        print("="*70 + "\n")
    
    return info


def validate_matrix_consistency(matrix: Matrix) -> Dict[str, Any]:
    """
    Valida consist√™ncia interna de uma matriz.
    
    Args:
        matrix: Inst√¢ncia de Matrix para validar
        
    Returns:
        Dict com resultados da valida√ß√£o
    """
    results = {
        'matrix_name': matrix.name,
        'checks': [],
        'errors': [],
        'warnings': [],
        'score': 0,
        'max_score': 0
    }
    
    # Check 1: Shape consistente
    results['max_score'] += 1
    if matrix.shape and len(matrix.shape) == 2 and matrix.shape[0] > 0 and matrix.shape[1] > 0:
        results['checks'].append("‚úÖ Shape v√°lido")
        results['score'] += 1
    else:
        results['errors'].append(f"‚ùå Shape inv√°lido: {matrix.shape}")
    
    # Check 2: Tipo correto
    results['max_score'] += 1
    if matrix.is_symbolic and matrix._symbolic_matrix is not None:
        results['checks'].append("‚úÖ Matriz simb√≥lica inicializada")
        results['score'] += 1
    elif not matrix.is_symbolic and matrix._numeric_matrix is not None:
        results['checks'].append("‚úÖ Matriz num√©rica inicializada")
        results['score'] += 1
    else:
        results['errors'].append("‚ùå Dados internos inconsistentes")
    
    # Check 3: Avalia√ß√£o poss√≠vel
    results['max_score'] += 1
    if matrix.is_symbolic:
        try:
            result = matrix.evaluate(use_cache=False)
            if isinstance(result, np.ndarray) and result.shape == matrix.shape:
                results['checks'].append("‚úÖ Avalia√ß√£o num√©rica bem-sucedida")
                results['score'] += 1
            else:
                results['warnings'].append("‚ö†Ô∏è Avalia√ß√£o retornou shape diferente")
        except Exception as e:
            results['errors'].append(f"‚ùå Falha na avalia√ß√£o: {e}")
    else:
        results['score'] += 1  # N√£o aplic√°vel para matrizes num√©ricas
    
    # Check 4: Propriedades especiais detectadas
    results['max_score'] += 1
    if matrix.is_square:
        if matrix._properties_cache:
            results['checks'].append(f"‚úÖ Propriedades detectadas: {list(matrix._properties_cache.keys())}")
            results['score'] += 1
        else:
            results['warnings'].append("‚ö†Ô∏è Nenhuma propriedade especial detectada")
    else:
        results['score'] += 1  # N√£o aplic√°vel para matrizes n√£o-quadradas
    
    # Check 5: Serializa√ß√£o
    results['max_score'] += 1
    try:
        dict_repr = matrix.to_dict()
        if isinstance(dict_repr, dict) and 'name' in dict_repr and 'shape' in dict_repr:
            results['checks'].append("‚úÖ Serializa√ß√£o para dict funcional")
            results['score'] += 1
        else:
            results['warnings'].append("‚ö†Ô∏è Serializa√ß√£o incompleta")
    except Exception as e:
        results['errors'].append(f"‚ùå Falha na serializa√ß√£o: {e}")
    
    # Calcular porcentagem
    results['percentage'] = (results['score'] / results['max_score'] * 100) if results['max_score'] > 0 else 0
    results['status'] = 'PASS' if results['score'] == results['max_score'] else 'FAIL'
    
    return results


def compare_matrices(
    matrix1: Matrix, 
    matrix2: Matrix,
    tolerance: float = 1e-9
) -> Dict[str, Any]:
    """
    Compara duas matrizes em detalhes.
    
    Args:
        matrix1: Primeira matriz
        matrix2: Segunda matriz
        tolerance: Toler√¢ncia para compara√ß√£o num√©rica
        
    Returns:
        Dict com resultados da compara√ß√£o
    """
    comparison = {
        'equal': False,
        'checks': [],
        'differences': []
    }
    
    # Shape
    if matrix1.shape != matrix2.shape:
        comparison['differences'].append(
            f"Shape diferente: {matrix1.shape} vs {matrix2.shape}"
        )
    else:
        comparison['checks'].append(f"‚úÖ Shape igual: {matrix1.shape}")
    
    # Tipo
    if matrix1.is_symbolic != matrix2.is_symbolic:
        comparison['differences'].append(
            f"Tipo diferente: symbolic={matrix1.is_symbolic} vs symbolic={matrix2.is_symbolic}"
        )
    else:
        comparison['checks'].append(f"‚úÖ Tipo igual: symbolic={matrix1.is_symbolic}")
    
    # Valores num√©ricos
    try:
        m1_num = matrix1.evaluate()
        m2_num = matrix2.evaluate()
        
        if np.allclose(m1_num, m2_num, rtol=tolerance, atol=tolerance):
            comparison['checks'].append("‚úÖ Valores num√©ricos iguais (dentro da toler√¢ncia)")
            comparison['equal'] = True
        else:
            max_diff = np.max(np.abs(m1_num - m2_num))
            comparison['differences'].append(
                f"Valores diferentes: diferen√ßa m√°xima = {max_diff:.2e}"
            )
            comparison['max_difference'] = float(max_diff)
    except Exception as e:
        comparison['differences'].append(f"N√£o foi poss√≠vel comparar valores: {e}")
    
    return comparison


def benchmark_matrix_operations(
    matrix: Matrix,
    iterations: int = 100
) -> Dict[str, Any]:
    """
    Benchmark de opera√ß√µes da matriz.
    
    Args:
        matrix: Matriz para benchmark
        iterations: N√∫mero de itera√ß√µes para cada opera√ß√£o
        
    Returns:
        Dict com tempos de execu√ß√£o
    """
    import time
    
    results = {
        'matrix_name': matrix.name,
        'shape': matrix.shape,
        'iterations': iterations,
        'timings': {}
    }
    
    # Benchmark evaluate()
    if matrix.is_symbolic:
        start = time.perf_counter()
        for _ in range(iterations):
            _ = matrix.evaluate(use_cache=False)
        end = time.perf_counter()
        results['timings']['evaluate_no_cache'] = (end - start) / iterations
        
        start = time.perf_counter()
        for _ in range(iterations):
            _ = matrix.evaluate(use_cache=True)
        end = time.perf_counter()
        results['timings']['evaluate_with_cache'] = (end - start) / iterations
    
    # Benchmark steps()
    start = time.perf_counter()
    for _ in range(min(iterations, 10)):  # Steps √© mais pesado
        _ = matrix.steps()
    end = time.perf_counter()
    results['timings']['steps'] = (end - start) / min(iterations, 10)
    
    # Benchmark clone()
    start = time.perf_counter()
    for _ in range(iterations):
        _ = matrix.clone()
    end = time.perf_counter()
    results['timings']['clone'] = (end - start) / iterations
    
    # Benchmark to_dict()
    start = time.perf_counter()
    for _ in range(iterations):
        _ = matrix.to_dict()
    end = time.perf_counter()
    results['timings']['to_dict'] = (end - start) / iterations
    
    return results


# ============================================================================
# FUN√á√ïES DE TESTE AUTOMATIZADO
# ============================================================================

def run_matrix_test_suite(verbose: bool = True) -> Dict[str, Any]:
    """
    Executa suite completa de testes automatizados.
    
    Args:
        verbose: Se True, imprime resultados detalhados
        
    Returns:
        Dict com resultados de todos os testes
    """
    if verbose:
        print("\n" + "="*70)
        print("üß™ PYMEMORIAL MATRIX TEST SUITE v2.2.0")
        print("="*70 + "\n")
    
    suite_results = {
        'total_tests': 0,
        'passed': 0,
        'failed': 0,
        'tests': {}
    }
    
    # Teste 1: Inicializa√ß√£o Simb√≥lica
    test_name = "Symbolic Initialization"
    suite_results['total_tests'] += 1
    try:
        variables = {
            'E': Variable('E', 21000.0),
            'I': Variable('I', 50000.0),
            'L': Variable('L', 6.0)
        }
        matrix = Matrix(
            data="[[12*E*I/L**3, 6*E*I/L**2], [6*E*I/L**2, 4*E*I/L]]",
            variables=variables,
            name="K_test"
        )
        
        if matrix.is_symbolic and matrix.shape == (2, 2):
            suite_results['passed'] += 1
            suite_results['tests'][test_name] = {'status': 'PASS', 'details': f"Shape: {matrix.shape}"}
            if verbose:
                print(f"‚úÖ {test_name}: PASS")
        else:
            suite_results['failed'] += 1
            suite_results['tests'][test_name] = {'status': 'FAIL', 'details': 'Shape ou tipo incorreto'}
            if verbose:
                print(f"‚ùå {test_name}: FAIL")
    except Exception as e:
        suite_results['failed'] += 1
        suite_results['tests'][test_name] = {'status': 'FAIL', 'details': str(e)}
        if verbose:
            print(f"‚ùå {test_name}: FAIL - {e}")
    
    # Teste 2: Avalia√ß√£o Num√©rica
    test_name = "Numeric Evaluation"
    suite_results['total_tests'] += 1
    try:
        result = matrix.evaluate()
        if isinstance(result, np.ndarray) and result.shape == (2, 2):
            suite_results['passed'] += 1
            suite_results['tests'][test_name] = {'status': 'PASS', 'details': 'Avalia√ß√£o bem-sucedida'}
            if verbose:
                print(f"‚úÖ {test_name}: PASS")
        else:
            suite_results['failed'] += 1
            suite_results['tests'][test_name] = {'status': 'FAIL', 'details': 'Resultado inv√°lido'}
            if verbose:
                print(f"‚ùå {test_name}: FAIL")
    except Exception as e:
        suite_results['failed'] += 1
        suite_results['tests'][test_name] = {'status': 'FAIL', 'details': str(e)}
        if verbose:
            print(f"‚ùå {test_name}: FAIL - {e}")
    
    # Teste 3: Gera√ß√£o de Steps
    test_name = "Steps Generation"
    suite_results['total_tests'] += 1
    try:
        steps = matrix.steps()
        expected_ops = {'definition', 'symbolic', 'substitution', 'intermediate', 'evaluation'}
        actual_ops = {s.get('operation') for s in steps if 'operation' in s}
        
        if expected_ops.issubset(actual_ops):
            suite_results['passed'] += 1
            suite_results['tests'][test_name] = {'status': 'PASS', 'details': f'{len(steps)} steps gerados'}
            if verbose:
                print(f"‚úÖ {test_name}: PASS")
        else:
            suite_results['failed'] += 1
            missing = expected_ops - actual_ops
            suite_results['tests'][test_name] = {'status': 'FAIL', 'details': f'Steps faltando: {missing}'}
            if verbose:
                print(f"‚ùå {test_name}: FAIL - Steps faltando: {missing}")
    except Exception as e:
        suite_results['failed'] += 1
        suite_results['tests'][test_name] = {'status': 'FAIL', 'details': str(e)}
        if verbose:
            print(f"‚ùå {test_name}: FAIL - {e}")
    
    # Teste 4: Clone
    test_name = "Matrix Cloning"
    suite_results['total_tests'] += 1
    try:
        cloned = matrix.clone()
        if cloned == matrix and cloned is not matrix:
            suite_results['passed'] += 1
            suite_results['tests'][test_name] = {'status': 'PASS', 'details': 'Clone independente criado'}
            if verbose:
                print(f"‚úÖ {test_name}: PASS")
        else:
            suite_results['failed'] += 1
            suite_results['tests'][test_name] = {'status': 'FAIL', 'details': 'Clone n√£o √© independente'}
            if verbose:
                print(f"‚ùå {test_name}: FAIL")
    except Exception as e:
        suite_results['failed'] += 1
        suite_results['tests'][test_name] = {'status': 'FAIL', 'details': str(e)}
        if verbose:
            print(f"‚ùå {test_name}: FAIL - {e}")
    
    # Teste 5: Serializa√ß√£o
    test_name = "Serialization"
    suite_results['total_tests'] += 1
    try:
        dict_repr = matrix.to_dict()
        restored = Matrix.from_dict(dict_repr)
        
        if restored == matrix:
            suite_results['passed'] += 1
            suite_results['tests'][test_name] = {'status': 'PASS', 'details': 'Serializa√ß√£o revers√≠vel'}
            if verbose:
                print(f"‚úÖ {test_name}: PASS")
        else:
            suite_results['failed'] += 1
            suite_results['tests'][test_name] = {'status': 'FAIL', 'details': 'Matriz restaurada diferente'}
            if verbose:
                print(f"‚ùå {test_name}: FAIL")
    except Exception as e:
        suite_results['failed'] += 1
        suite_results['tests'][test_name] = {'status': 'FAIL', 'details': str(e)}
        if verbose:
            print(f"‚ùå {test_name}: FAIL - {e}")
    
    # Sum√°rio
    suite_results['pass_rate'] = (suite_results['passed'] / suite_results['total_tests'] * 100)
    
    if verbose:
        print("\n" + "="*70)
        print(f"üìä RESULTADOS: {suite_results['passed']}/{suite_results['total_tests']} testes passaram")
        print(f"   Taxa de sucesso: {suite_results['pass_rate']:.1f}%")
        print("="*70 + "\n")
    
    return suite_results