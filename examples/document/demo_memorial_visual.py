# examples/demo_memorial_visual.py
"""
Demonstra√ß√£o Visual do Memorial de C√°lculo PyMemorial FASE 7.

Este exemplo cria um memorial completo de dimensionamento de um pilar misto
conforme NBR 8800:2024, gerando sa√≠da HTML5 para visualiza√ß√£o imediata.

Autor: PyMemorial Team
Data: 2025-10-19
"""

from datetime import datetime
from pathlib import Path

from pymemorial.document import (
    Memorial,
    DocumentMetadata,
    NormCode,
    Revision,
    DocumentLanguage,
)

# ============================================================================
# CONFIGURA√á√ÉO DO DOCUMENTO
# ============================================================================

def create_demo_memorial():
    """Cria memorial de demonstra√ß√£o completo."""
    
    # 1. Criar metadados
    print("üìù Criando metadados do documento...")
    metadata = DocumentMetadata(
        title="Memorial de C√°lculo - Pilar Misto PM-1",
        author="Eng. Jo√£o Silva, CREA: 12345/SP",
        company="Estrutural Engenharia LTDA",
        code=NormCode.NBR8800_2024,
        project_number="EST-2024-001",
        revision=Revision(
            number="R00",
            date=datetime(2025, 10, 19),
            description="Emiss√£o inicial para aprova√ß√£o",
            author="Jo√£o Silva",
            approved=False
        ),
        language=DocumentLanguage.PT_BR,
        keywords=['pilar misto', 'NBR 8800', 'compress√£o', 'NBR 8800:2024'],
        abstract=(
            "Este memorial apresenta o dimensionamento do pilar misto PM-1 "
            "conforme NBR 8800:2024. O pilar possui se√ß√£o transversal em "
            "perfil I e est√° submetido a compress√£o axial e momento fletor."
        )
    )
    
    # 2. Criar memorial
    print("üèóÔ∏è  Criando memorial com template NBR 8800...")
    memorial = Memorial(
        metadata,
        template='nbr8800',
        auto_toc=True,
        auto_title_page=True
    )
    
    # 3. Definir contexto global (vari√°veis usadas ao longo do documento)
    print("üî¢ Definindo vari√°veis globais...")
    memorial.set_context(
        # Geometria
        H=4.5,          # Altura do pilar (m)
        L_flam=4.2,     # Comprimento de flambagem (m)
        
        # Se√ß√£o transversal
        perfil="W250x73",
        A_g=93.1,       # √Årea bruta (cm¬≤)
        I_x=7110,       # Momento de in√©rcia eixo x (cm‚Å¥)
        I_y=1600,       # Momento de in√©rcia eixo y (cm‚Å¥)
        r_x=8.72,       # Raio de gira√ß√£o x (cm)
        r_y=4.15,       # Raio de gira√ß√£o y (cm)
        
        # Propriedades dos materiais
        f_y=345,        # Tens√£o de escoamento (MPa)
        E=200000,       # M√≥dulo de elasticidade (MPa)
        
        # Solicita√ß√µes
        N_Sd=2500,      # For√ßa normal de c√°lculo (kN)
        M_x_Sd=180,     # Momento fletor eixo x (kNm)
        M_y_Sd=45,      # Momento fletor eixo y (kNm)
        
        # Resultados (calculados previamente)
        lambda_x=0.65,  # √çndice de esbeltez reduzido x
        lambda_y=1.38,  # √çndice de esbeltez reduzido y
        chi_x=0.877,    # Fator de redu√ß√£o x
        chi_y=0.562,    # Fator de redu√ß√£o y
        N_Rd=3650,      # Resist√™ncia √† compress√£o (kN)
        M_Rd_x=280,     # Momento resistente x (kNm)
        M_Rd_y=95,      # Momento resistente y (kNm)
    )
    
    return memorial


def add_memorial_content(memorial):
    """Adiciona conte√∫do ao memorial."""
    
    # ========================================================================
    # 1. INTRODU√á√ÉO
    # ========================================================================
    print("\nüìñ Se√ß√£o 1: Introdu√ß√£o")
    memorial.add_section("Introdu√ß√£o", level=1)
    memorial.add_paragraph("""
Este memorial de c√°lculo apresenta o dimensionamento do pilar misto PM-1 
conforme a norma NBR 8800:2024 - Projeto de estruturas de a√ßo e de 
estruturas mistas de a√ßo e concreto de edif√≠cios.

O pilar possui altura total de H = {H:.1f} m e comprimento de flambagem 
L_flam = {L_flam:.1f} m. A se√ß√£o transversal adotada √© o perfil laminado 
{perfil} em a√ßo ASTM A572 Grau 50.

**Objetivo:** Verificar a seguran√ßa estrutural do pilar PM-1 submetido a 
compress√£o axial combinada com flex√£o biaxial.
""")
    
    # ========================================================================
    # 2. DADOS DE ENTRADA
    # ========================================================================
    print("üìä Se√ß√£o 2: Dados de Entrada")
    memorial.add_section("Dados de Entrada", level=1)
    
    memorial.add_section("Geometria", level=2)
    memorial.add_paragraph("""
**Dimens√µes principais:**

- Altura do pilar: H = {H:.1f} m
- Comprimento de flambagem: L_flam = {L_flam:.1f} m
- Comprimento efetivo: K¬∑L_flam = 1.0 √ó {L_flam:.1f} = {L_flam:.1f} m
""")
    
    memorial.add_section("Se√ß√£o Transversal", level=2)
    memorial.add_paragraph("""
**Perfil laminado {perfil}:**

- √Årea bruta da se√ß√£o: A_g = {A_g:.2f} cm¬≤
- Momento de in√©rcia (eixo x): I_x = {I_x:.0f} cm‚Å¥
- Momento de in√©rcia (eixo y): I_y = {I_y:.0f} cm‚Å¥
- Raio de gira√ß√£o (eixo x): r_x = {r_x:.2f} cm
- Raio de gira√ß√£o (eixo y): r_y = {r_y:.2f} cm
""")
    
    memorial.add_section("Propriedades dos Materiais", level=2)
    memorial.add_paragraph("""
**A√ßo ASTM A572 Grau 50:**

- Tens√£o de escoamento: f_y = {f_y:.0f} MPa
- M√≥dulo de elasticidade: E = {E:.0f} MPa
- Coeficiente de Poisson: ŒΩ = 0.30
""")
    
    memorial.add_section("A√ß√µes e Solicita√ß√µes", level=2)
    memorial.add_paragraph("""
**Solicita√ß√µes de c√°lculo (combina√ß√£o √∫ltima normal):**

- For√ßa normal de compress√£o: N_Sd = {N_Sd:.2f} kN
- Momento fletor (eixo x): M_x_Sd = {M_x_Sd:.2f} kNm
- Momento fletor (eixo y): M_y_Sd = {M_y_Sd:.2f} kNm
""")
    
    # ========================================================================
    # 3. DIMENSIONAMENTO
    # ========================================================================
    print("üîß Se√ß√£o 3: Dimensionamento")
    memorial.add_section("Dimensionamento √† Compress√£o", level=1)
    
    memorial.add_section("Esbeltez Reduzida", level=2)
    memorial.add_paragraph("""
Conforme item 5.3.3.1 da NBR 8800:2024, o √≠ndice de esbeltez reduzido √© 
calculado por:

Œª = (K¬∑L / r) ¬∑ ‚àö(f_y / E¬∑œÄ¬≤)

**Eixo x (forte):**
- Œª_x = {lambda_x:.3f} ‚â§ 1.5 ‚úÖ

**Eixo y (fraco):**
- Œª_y = {lambda_y:.3f} ‚â§ 1.5 ‚úÖ

Como Œª_y > Œª_x, o **eixo y √© o cr√≠tico** para flambagem.
""")
    
    memorial.add_section("Fator de Redu√ß√£o", level=2)
    memorial.add_paragraph("""
Conforme item 5.3.3.2 da NBR 8800:2024, o fator de redu√ß√£o œá √© obtido 
considerando a curva de flambagem adequada ao perfil.

Para perfil I laminado com flambagem em torno do eixo de menor in√©rcia:
- Curva de flambagem: **b**
- Imperfei√ß√£o inicial: Œ± = 0.34

**Fator de redu√ß√£o para eixo cr√≠tico (y):**
- œá_y = {chi_y:.3f}
""")
    
    memorial.add_section("Resist√™ncia √† Compress√£o", level=2)
    memorial.add_paragraph("""
A resist√™ncia de c√°lculo √† compress√£o √© dada por:

N_Rd = œá ¬∑ A_g ¬∑ f_y

N_Rd = {chi_y:.3f} √ó {A_g:.2f} √ó {f_y:.0f} / 10
N_Rd = **{N_Rd:.2f} kN**
""")
    
    # ========================================================================
    # 4. VERIFICA√á√ïES
    # ========================================================================
    print("‚úÖ Se√ß√£o 4: Verifica√ß√µes")
    memorial.add_section("Verifica√ß√µes", level=1)
    
    memorial.add_section("Resist√™ncia √† Compress√£o", level=2)
    memorial.add_paragraph("""
**Verifica√ß√£o:** N_Sd ‚â§ N_Rd

{N_Sd:.2f} kN ‚â§ {N_Rd:.2f} kN ‚úÖ **OK!**

Margem de seguran√ßa: {N_Rd:.2f} / {N_Sd:.2f} = {ratio:.2f}
""", variables={'ratio': 3650/2500})
    
    # Adicionar verifica√ß√£o t√©cnica
    memorial.add_verification(
        expression="N_Sd <= N_Rd",
        passed=True,
        description="Resist√™ncia √† compress√£o axial",
        norm=NormCode.NBR8800_2024,
        item="5.3.2.1",
        calculated_values={'N_Sd': 2500, 'N_Rd': 3650},
        safety_factor=3650/2500
    )
    
    memorial.add_section("Flex√£o Biaxial", level=2)
    memorial.add_paragraph("""
**Verifica√ß√£o da intera√ß√£o flex√£o-compress√£o:**

Para elementos submetidos a compress√£o e flex√£o biaxial, deve-se 
verificar a express√£o de intera√ß√£o (item 5.5.2.2):

(N_Sd / N_Rd) + (M_x_Sd / M_Rd_x) + (M_y_Sd / M_Rd_y) ‚â§ 1.0

Onde:
- M_Rd_x = {M_Rd_x:.2f} kNm (momento resistente eixo x)
- M_Rd_y = {M_Rd_y:.2f} kNm (momento resistente eixo y)

**C√°lculo:**

({N_Sd:.2f} / {N_Rd:.2f}) + ({M_x_Sd:.2f} / {M_Rd_x:.2f}) + ({M_y_Sd:.2f} / {M_Rd_y:.2f})

= {ratio_final:.3f} ‚â§ 1.0 ‚úÖ **OK!**
""", variables={'ratio_final': 2500/3650 + 180/280 + 45/95})
    
    # Adicionar verifica√ß√£o de flex√£o-compress√£o
    memorial.add_verification(
        expression="(N_Sd/N_Rd) + (M_x/M_Rd_x) + (M_y/M_Rd_y) <= 1.0",
        passed=True,
        description="Intera√ß√£o flex√£o-compress√£o biaxial",
        norm=NormCode.NBR8800_2024,
        item="5.5.2.2",
        calculated_values={
            'N_Sd': 2500,
            'N_Rd': 3650,
            'M_x_Sd': 180,
            'M_Rd_x': 280,
            'M_y_Sd': 45,
            'M_Rd_y': 95,
            'ratio': 0.879
        }
    )
    
    # ========================================================================
    # 5. CONCLUS√ïES
    # ========================================================================
    print("üìã Se√ß√£o 5: Conclus√µes")
    memorial.add_section("Conclus√µes", level=1)
    memorial.add_paragraph("""
Com base nas an√°lises e verifica√ß√µes realizadas, conclui-se que:

1. **Compress√£o axial:** O pilar PM-1 apresenta resist√™ncia adequada √† 
   compress√£o axial, com N_Rd = {N_Rd:.2f} kN > N_Sd = {N_Sd:.2f} kN.

2. **Flex√£o biaxial:** A intera√ß√£o flex√£o-compress√£o foi verificada 
   conforme item 5.5.2.2 da NBR 8800:2024, resultando em √≠ndice de 
   utiliza√ß√£o de 87.9%, dentro do limite de seguran√ßa.

3. **Aprova√ß√£o:** O perfil laminado {perfil} em a√ßo ASTM A572 Grau 50 
   atende aos requisitos normativos para o pilar PM-1.

**Recomenda√ß√µes:**
- Utilizar liga√ß√µes de extremidade conforme projeto estrutural
- Garantir contraventamento lateral adequado
- Aplicar pintura anticorrosiva em toda superf√≠cie exposta
""")


def generate_demo():
    """Fun√ß√£o principal de gera√ß√£o do memorial de demonstra√ß√£o."""
    print("\n" + "="*70)
    print("üöÄ PyMemorial FASE 7 - Demonstra√ß√£o Visual")
    print("="*70)
    
    # Criar memorial
    memorial = create_demo_memorial()
    
    # Adicionar conte√∫do
    add_memorial_content(memorial)
    
    # Validar antes de renderizar
    print("\nüîç Validando documento...")
    result = memorial.validate()
    
    if result.valid:
        print("‚úÖ Documento v√°lido!")
    else:
        print(f"‚ö†Ô∏è  {len(result.errors)} erros encontrados:")
        for error in result.errors:
            print(f"   - {error.message}")
    
    # Gerar sa√≠das
    output_dir = Path("examples/outputs")
    output_dir.mkdir(exist_ok=True, parents=True)
    
    print(f"\nüìÇ Gerando outputs em: {output_dir}")
    
    # HTML5 (para visualiza√ß√£o imediata)
    print("   üåê Gerando HTML5...")
    html_path = output_dir / "memorial_demo.html"
    memorial.render(html_path, format='html')
    print(f"      ‚úÖ {html_path}")
    
    # JSON (para arquivamento)
    print("   üìÑ Gerando JSON...")
    json_path = output_dir / "memorial_demo.json"
    memorial.export_json(json_path)
    print(f"      ‚úÖ {json_path}")
    
    # Estat√≠sticas
    print("\nüìä Estat√≠sticas do documento:")
    print(f"   - Se√ß√µes: {len(memorial.sections)}")
    print(f"   - Verifica√ß√µes: {len(memorial.verifications)}")
    verif_ok = sum(1 for v in memorial.verifications if v.passed)
    print(f"   - Verifica√ß√µes OK: {verif_ok}/{len(memorial.verifications)}")
    
    print("\n" + "="*70)
    print("‚úÖ Memorial gerado com sucesso!")
    print("="*70)
    print(f"\nüëâ Abra o arquivo HTML para visualizar:")
    print(f"   {html_path.resolve()}\n")
    
    return memorial


if __name__ == '__main__':
    memorial = generate_demo()
