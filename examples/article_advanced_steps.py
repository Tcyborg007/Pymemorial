# examples/article_advanced_steps.py
"""
Artigo T√©cnico Avan√ßado: Demonstrando PyMemorial Core Steps via Natural Editor

Objetivo: Showcase da integra√ß√£o natural_engine + core.Equation.steps com
          diferentes n√≠veis de granularidade, integrais e simula√ß√£o de matrizes.
"""

import logging
import math # Necess√°rio se usar fun√ß√µes math diretamente (ex: pi)

# Habilitar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(levelname)-8s | %(name)-30s | %(message)s'
)

# Importa o editor que usa o Core por baixo
from pymemorial.editor import NaturalMemorialEditor

print("\n" + "=" * 80)
print("GERANDO ARTIGO T√âCNICO AVAN√áADO COM PYMEMORIAL STEPS")
print("=" * 80)

# Inicializa o editor (que agora usa o Core)
editor = NaturalMemorialEditor(document_type='memorial') # Modo memorial mostra mais detalhes

# ========== CONTE√öDO DO ARTIGO ==========
# Usando r""" para raw string (evita problemas com \)
article_text = r"""
# An√°lise Avan√ßada de Viga com PyMemorial: Detalhamento via Steps

**Autor:** PyMemorial Engine v5.1
**Data:** 22 de Outubro de 2025

---
## 1. Introdu√ß√£o

Este documento demonstra as capacidades avan√ßadas do PyMemorial na an√°lise estrutural, combinando escrita natural com o poder computacional do Python e SymPy, acessado atrav√©s do PyMemorial Core. Focaremos na an√°lise de uma viga simples, mas utilizaremos a funcionalidade `steps` com diferentes n√≠veis de granularidade (`basic`, `smart`, `detailed`) para ilustrar o processo de c√°lculo, incluindo o c√°lculo de propriedades de se√ß√£o via integra√ß√£o e a representa√ß√£o de termos de matrizes de rigidez. A filosofia √© clara: escreva naturalmente, deixe o PyMemorial fazer o trabalho pesado e fornecer o n√≠vel de detalhe desejado.

---
## 2. Defini√ß√£o do Problema

Analisaremos uma viga biapoiada de se√ß√£o retangular ("viga_ret") sujeita a uma carga uniformemente distribu√≠da.

### 2.1 Dados Geom√©tricos
Comprimento da viga:
L_viga = 6 m

Se√ß√£o transversal retangular:
b_ret = 25 cm
h_ret = 60 cm

# "Truque" para vari√°vel de integra√ß√£o
y = 0

### 2.2 Propriedades do Material (Concreto C30)
M√≥dulo de Elasticidade:
E_c = 31 GPa

### 2.3 Carregamento
Carga distribu√≠da (peso pr√≥prio + carga acidental):
q_dist = 25 kN/m

### 2.4 Constantes
pi = 3.14159265 # Definido para clareza, poderia usar sympy.pi

---
## 3. C√°lculo das Propriedades da Se√ß√£o

Calcularemos a √°rea e o momento de in√©rcia da se√ß√£o retangular. A in√©rcia ser√° calculada via integra√ß√£o para demonstrar a capacidade do SymPy.

### 3.1 √Årea da Se√ß√£o
# Usando c√°lculo impl√≠cito (Parser 2-pass)
@calc[steps:smart] A_ret = b_ret * h_ret

### 3.2 Momento de In√©rcia (via Integral)
Utilizamos a defini√ß√£o integral $I_x = \int_A y^2 dA$, onde $dA = b dy$.

@calc[steps:smart] I_ret_integral = integrate(b_ret * y**2, (y, -h_ret/2, h_ret/2))

*Observa√ß√£o: O modo `basic` deve mostrar a f√≥rmula simb√≥lica, a substitui√ß√£o e o resultado final.*

---
## 4. An√°lise da Viga (Euler-Bernoulli)

Calcularemos as rea√ß√µes de apoio, o momento fletor m√°ximo e a flecha m√°xima, demonstrando diferentes n√≠veis de detalhamento dos passos.

### 4.1 Rea√ß√µes de Apoio
Para uma viga biapoiada com carga distribu√≠da 'q', as rea√ß√µes s√£o iguais.
@calc[steps:smart] R_apoio = (q_dist * L_viga) / 2

### 4.2 Momento Fletor M√°ximo (M_max = q * L^2 / 8)

**Modo Smart:** O PyMemorial Core decide o n√≠vel de detalhe.
@calc[steps:smart] M_max_smart = (q_dist * L_viga**2) / 8

**Modo Detailed:** Mostra mais passos intermedi√°rios (se implementado no Core).
@calc[steps:detailed] M_max_detailed = (q_dist * L_viga**2) / 8

*Comparando `{M_max_smart:~P}` com `{M_max_detailed:~P}`, vemos que o resultado final √© o mesmo, mas a granularidade `detailed` pode (dependendo da implementa√ß√£o no core.Equation) expor mais etapas alg√©bricas ou de avalia√ß√£o.*

### 4.3 Flecha M√°xima (v_max = 5 * q * L^4 / (384 * E * I))

**Modo Basic:** Apenas os passos essenciais.
@calc[steps:smart] v_max_basic = (5 * q_dist * L_viga**4) / (384 * E_c * I_ret_integral)

**Modo Detailed:** M√°ximo detalhamento dos passos.
@calc[steps:detailed] v_max_detailed_arrow = (5 * q_dist * L_viga**4) / (384 * E_c * I_ret_integral)

*A flecha m√°xima calculada √© `{v_max_basic:.3f~P}` (modo basic) ou `{v_max_detailed_arrow:.3f~P}` (modo detailed). A diferen√ßa est√° na visualiza√ß√£o do processo de c√°lculo.*

---
## 5. Simula√ß√£o de Termos da Matriz de Rigidez (Euler-Bernoulli)

Podemos usar o `@calc` para computar termos individuais da matriz de rigidez $[k_e]$ de um elemento de viga de Euler-Bernoulli. Embora o PyMemorial n√£o renderize a matriz completa, ele calcula seus componentes.

Elemento de comprimento L, rigidez EI:
L_elem = L_viga # Usando o comprimento total como exemplo de um elemento
@calc[numeric] E_I = E_c * I_ret_integral

Termos selecionados da matriz $[k_{EB}] = \frac{EI}{L^3} [\dots]$:

Termo (1,1) - Rigidez √† transla√ß√£o vertical:
@calc[steps:smart] k11 = (12 * E_I) / L_elem**3

Termo (1,2) - Acoplamento transla√ß√£o-rota√ß√£o:
@calc[steps:smart] k12 = (6 * E_I) / L_elem**2

Termo (2,2) - Rigidez √† rota√ß√£o:
@calc[steps:smart] k22 = (4 * E_I) / L_elem

*Estes valores (`**{k11:.3e~P}**`, `**{k12:.3e~P}**`, `**{k22:.3e~P}**`) representam os coeficientes que relacionam for√ßas/momentos nodais a deslocamentos/rota√ß√µes nodais no elemento finito.*
---
## 6. Conclus√£o

O PyMemorial, atrav√©s da integra√ß√£o do `NaturalMemorialEditor` com o `core`, permite uma escrita fluida e natural para documentos de engenharia, enquanto realiza c√°lculos complexos nos bastidores. A capacidade de controlar a granularidade dos passos de c√°lculo via `@calc[steps:granularity]` oferece flexibilidade para o engenheiro documentar seu trabalho com o n√≠vel de detalhe apropriado, desde um resumo (`basic`) at√© uma depura√ß√£o detalhada (`detailed` ou `all`). A integra√ß√£o com SymPy permite o uso de fun√ß√µes matem√°ticas avan√ßadas como `integrate`, e a estrutura suporta a representa√ß√£o de conceitos como matrizes atrav√©s do c√°lculo de seus termos.

---
## 7. Refer√™ncias (Placeholder)
* Hibbeler, R. C. (2012). *Resist√™ncia dos Materiais*. Pearson.
* Beer, F. P., Johnston, E. R., Jr., DeWolf, J. T., & Mazurek, D. F. (2011). *Mec√¢nica dos Materiais*. McGraw-Hill.

"""

# ========== PROCESSAMENTO COM PYMEMORIAL ==========
try:
    result = editor.process(article_text)
    print(result) # Imprime o artigo processado

    summary = editor.get_summary()
    print("\n" + "-" * 80)
    print("RESUMO DO ARTIGO AVAN√áADO GERADO:")
    print(f"  Vari√°veis Totais: {summary['total_variables']}")
    print(f"  Equa√ß√µes Totais: {summary['total_equations']}")
    print(f"  Lista de Equa√ß√µes Processadas: {summary['equations_list']}")

    print("-" * 80)
    print("\nüöÄ Artigo T√©cnico Avan√ßado (com Steps) Gerado com Sucesso! üöÄ")

except Exception as e:
    print("\n" + "=" * 80)
    print("ERRO DURANTE O PROCESSAMENTO DO ARTIGO AVAN√áADO:")
    print(e)
    print("=" * 80)
    logging.exception("Erro detalhado:")

print("\n" + "=" * 80)