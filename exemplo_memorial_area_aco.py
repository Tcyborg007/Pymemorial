# exemplo_memorial_completo.py
"""
Memorial de C√°lculo COMPLETO - Dimensionamento de Viga em Concreto Armado
NBR 6118:2023
"""

from pathlib import Path
from pymemorial.document import Memorial, DocumentMetadata
from pymemorial.core import Equation
from pymemorial.core.variable import VariableFactory


def criar_memorial_completo():
    """Cria memorial profissional completo."""
    
    # ========================================================================
    # METADATA
    # ========================================================================
    metadata = DocumentMetadata(
        title='Memorial de C√°lculo - Dimensionamento de Viga V1',
        author='Eng. Jo√£o Silva, CREA/SP 123456'
    )
    
    # ========================================================================
    # CRIAR MEMORIAL
    # ========================================================================
    print("üîß Gerando Memorial Completo...")
    memorial = Memorial(metadata=metadata)
    
    # ========================================================================
    # SE√á√ÉO 1: INTRODU√á√ÉO
    # ========================================================================
    memorial.add_section(
        title='Objetivo',
        content='''
Este memorial apresenta o dimensionamento √† flex√£o simples de viga em concreto armado 
conforme a **NBR 6118:2023 - Projeto de estruturas de concreto**.

O c√°lculo determina a √°rea de a√ßo necess√°ria para resistir aos esfor√ßos de flex√£o, 
considerando os estados limites √∫ltimos e de servi√ßo.
        ''',
        level=1
    )
    
    # ========================================================================
    # SE√á√ÉO 2: DADOS DE ENTRADA
    # ========================================================================
    memorial.add_section(
        title='Dados de Entrada',
        content='',
        level=1
    )
    
    memorial.add_section(
        title='Geometria da Viga',
        content='''
| Par√¢metro | S√≠mbolo | Valor | Unidade |
|-----------|---------|-------|---------|
| Largura | b | 20 | cm |
| Altura total | h | 50 | cm |
| Altura √∫til | d | 45 | cm |
| Cobrimento | c | 3.0 | cm |
| V√£o | L | 6.0 | m |
        ''',
        level=2
    )
    
    memorial.add_section(
        title='Materiais',
        content='''
**Concreto:**
- Classe: C30
- f_ck = 30 MPa (resist√™ncia caracter√≠stica √† compress√£o)
- Œ≥_c = 1.4 (coeficiente de pondera√ß√£o NBR 6118, item 12.3.3)

**A√ßo:**
- Categoria: CA-50
- f_yk = 500 MPa (resist√™ncia caracter√≠stica ao escoamento)
- Œ≥_s = 1.15 (coeficiente de pondera√ß√£o NBR 6118, item 12.4.1)
        ''',
        level=2
    )
    
    memorial.add_section(
        title='Carregamentos',
        content='''
**A√ß√µes Permanentes (g):**
- Peso pr√≥prio: 2.5 kN/m
- Revestimento: 1.0 kN/m
- Total: g = 3.5 kN/m

**A√ß√µes Vari√°veis (q):**
- Sobrecarga de utiliza√ß√£o: q = 3.0 kN/m
- Œ≥_f = 1.4 (combina√ß√£o normal, NBR 6118, item 11.7.1)

**Momento Caracter√≠stico:**
- M_k = (g + q) √ó L¬≤ / 8 = (3.5 + 3.0) √ó 6¬≤ / 8 = **29.25 kN.m**

**Observa√ß√£o:** Este valor ser√° majorado pelo coeficiente Œ≥_f para obten√ß√£o do momento de c√°lculo.
        ''',
        level=2
    )
    
    # ========================================================================
    # SE√á√ÉO 3: C√ÅLCULO DO MOMENTO DE PROJETO
    # ========================================================================
    memorial.add_section(
        title='Momento de C√°lculo (M_d)',
        content='''
O momento de c√°lculo √© obtido majorando o momento caracter√≠stico pelo coeficiente de 
pondera√ß√£o das a√ß√µes conforme NBR 6118:2023, item 11.7.1:
        ''',
        level=1
    )
    
    # Vari√°veis
    M_k = VariableFactory.create('M_k', value=29.25, unit='kN*m', 
                                 description='Momento caracter√≠stico')
    gamma_f = VariableFactory.create('gamma_f', value=1.4, unit='', 
                                     description='Coeficiente de majora√ß√£o das a√ß√µes')
    
    # Equa√ß√£o M_d com PASSOS DETALHADOS
    eq_M_d = Equation(
        expression='M_d = gamma_f * M_k',
        variables={'gamma_f': gamma_f, 'M_k': M_k},
        description='Momento de c√°lculo (NBR 6118:2023, item 11.7.1)'
    )
    
    M_d_value = eq_M_d.evaluate()
    
    memorial.add_paragraph(f'''
**C√°lculo:**

M_d = Œ≥_f √ó M_k = {gamma_f.magnitude} √ó {M_k.magnitude} = **{M_d_value:.2f} kN.m**

**Conclus√£o:** O momento de c√°lculo √© M_d = {M_d_value:.2f} kN.m
    ''')
    
    # ========================================================================
    # SE√á√ÉO 4: RESIST√äNCIAS DE C√ÅLCULO
    # ========================================================================
    memorial.add_section(
        title='Resist√™ncias de C√°lculo',
        content='',
        level=1
    )
    
    # f_cd
    memorial.add_section(
        title='Resist√™ncia de C√°lculo do Concreto (f_cd)',
        content='',
        level=2
    )
    
    f_ck = VariableFactory.create('f_ck', value=30.0, unit='MPa')
    gamma_c = VariableFactory.create('gamma_c', value=1.4, unit='')
    
    eq_f_cd = Equation(
        expression='f_cd = f_ck / gamma_c',
        variables={'f_ck': f_ck, 'gamma_c': gamma_c},
        description='Resist√™ncia de c√°lculo do concreto (NBR 6118:2023, item 12.3.3)'
    )
    
    f_cd_value = eq_f_cd.evaluate()
    
    memorial.add_paragraph(f'''
A resist√™ncia de c√°lculo do concreto √† compress√£o √© obtida reduzindo-se a resist√™ncia 
caracter√≠stica pelo coeficiente Œ≥_c:

f_cd = f_ck / Œ≥_c = {f_ck.magnitude} / {gamma_c.magnitude} = **{f_cd_value:.2f} MPa**
    ''')
    
    # f_yd
    memorial.add_section(
        title='Resist√™ncia de C√°lculo do A√ßo (f_yd)',
        content='',
        level=2
    )
    
    f_yk = VariableFactory.create('f_yk', value=500.0, unit='MPa')
    gamma_s = VariableFactory.create('gamma_s', value=1.15, unit='')
    
    eq_f_yd = Equation(
        expression='f_yd = f_yk / gamma_s',
        variables={'f_yk': f_yk, 'gamma_s': gamma_s},
        description='Resist√™ncia de c√°lculo do a√ßo (NBR 6118:2023, item 8.3.4)'
    )
    
    f_yd_value = eq_f_yd.evaluate()
    
    memorial.add_paragraph(f'''
A resist√™ncia de c√°lculo do a√ßo ao escoamento √© obtida reduzindo-se a resist√™ncia 
caracter√≠stica pelo coeficiente Œ≥_s:

f_yd = f_yk / Œ≥_s = {f_yk.magnitude} / {gamma_s.magnitude} = **{f_yd_value:.2f} MPa**
    ''')
    
    # ========================================================================
    # SE√á√ÉO 5: DIMENSIONAMENTO DA ARMADURA
    # ========================================================================
    memorial.add_section(
        title='Dimensionamento da Armadura Longitudinal',
        content='',
        level=1
    )
    
    # Dados
    b_cm = 20.0
    d_cm = 45.0
    h_cm = 50.0
    M_d_kNcm = M_d_value * 100
    f_cd_kNcm2 = f_cd_value / 10
    f_yd_kNcm2 = f_yd_value / 10
    
    # K_MD
    memorial.add_section(
        title='Par√¢metro Adimensional K_MD',
        content='',
        level=2
    )
    
    K_MD = M_d_kNcm / (b_cm * d_cm**2 * f_cd_kNcm2)
    
    memorial.add_paragraph(f'''
O par√¢metro adimensional K_MD √© calculado por:

K_MD = M_d / (b √ó d¬≤ √ó f_cd)

Onde:
- M_d = {M_d_kNcm:.2f} kN.cm
- b = {b_cm} cm
- d = {d_cm} cm
- f_cd = {f_cd_kNcm2:.2f} kN/cm¬≤

**K_MD = {K_MD:.4f}**

**Verifica√ß√£o do dom√≠nio de deforma√ß√£o:**
- K_MD = {K_MD:.4f} < 0.295 ‚úì
- **Conclus√£o:** Flex√£o simples, armadura simples √© suficiente (Dom√≠nio 2 ou 3)
    ''')
    
    # K_z
    memorial.add_section(
        title='Coeficiente K_z',
        content='',
        level=2
    )
    
    K_z = (1 - (1 - 2 * K_MD) ** 0.5) / 2
    
    memorial.add_paragraph(f'''
O coeficiente da posi√ß√£o da linha neutra √©:

K_z = [1 - ‚àö(1 - 2√óK_MD)] / 2 = [1 - ‚àö(1 - 2√ó{K_MD:.4f})] / 2 = **{K_z:.4f}**

Este coeficiente indica a posi√ß√£o relativa da linha neutra na se√ß√£o.
    ''')
    
    # z
    memorial.add_section(
        title='Bra√ßo de Alavanca (z)',
        content='',
        level=2
    )
    
    z_cm = d_cm * (1 - 0.4 * K_z)
    
    memorial.add_paragraph(f'''
O bra√ßo de alavanca √©:

z = d √ó (1 - 0.4√óK_z) = {d_cm} √ó (1 - 0.4√ó{K_z:.4f}) = **{z_cm:.2f} cm**
    ''')
    
    # A_s
    memorial.add_section(
        title='√Årea de A√ßo Calculada (A_s,calc)',
        content='',
        level=2
    )
    
    A_s_calc = M_d_kNcm / (z_cm * f_yd_kNcm2)
    
    memorial.add_paragraph(f'''
A √°rea de a√ßo necess√°ria √© calculada por:

A_s = M_d / (z √ó f_yd)

A_s = {M_d_kNcm:.2f} / ({z_cm:.2f} √ó {f_yd_kNcm2:.2f})

**A_s,calc = {A_s_calc:.2f} cm¬≤**
    ''')
    
    # ========================================================================
    # SE√á√ÉO 6: VERIFICA√á√ïES NORMATIVAS
    # ========================================================================
    memorial.add_section(
        title='Verifica√ß√µes Normativas',
        content='',
        level=1
    )
    
    # Armadura m√≠nima
    memorial.add_section(
        title='Armadura M√≠nima (NBR 6118:2023, item 17.3.5.2.1)',
        content='',
        level=2
    )
    
    rho_min = 0.15 / 100
    A_s_min = rho_min * b_cm * d_cm
    
    memorial.add_paragraph(f'''
A taxa m√≠nima de armadura √©:

œÅ_min = 0.15% (para CA-50)

A_s,min = œÅ_min √ó b √ó d = {rho_min*100:.2f}% √ó {b_cm} √ó {d_cm} = **{A_s_min:.2f} cm¬≤**

**Verifica√ß√£o:** A_s,calc = {A_s_calc:.2f} cm¬≤ > A_s,min = {A_s_min:.2f} cm¬≤ ‚úì
    ''')
    
    # Armadura m√°xima
    memorial.add_section(
        title='Armadura M√°xima (NBR 6118:2023, item 17.3.5.2.4)',
        content='',
        level=2
    )
    
    A_s_max = 0.04 * b_cm * h_cm
    
    memorial.add_paragraph(f'''
A √°rea m√°xima de armadura √©:

A_s,max = 4% √ó b √ó h = 4% √ó {b_cm} √ó {h_cm} = **{A_s_max:.2f} cm¬≤**

**Verifica√ß√£o:** A_s,calc = {A_s_calc:.2f} cm¬≤ < A_s,max = {A_s_max:.2f} cm¬≤ ‚úì
    ''')
    
    # ========================================================================
    # SE√á√ÉO 7: DETALHAMENTO DA ARMADURA
    # ========================================================================
    memorial.add_section(
        title='Detalhamento da Armadura',
        content='',
        level=1
    )
    
    memorial.add_paragraph('''
**Bitolas comerciais dispon√≠veis para CA-50:**

| Di√¢metro (mm) | √Årea (cm¬≤) | √Årea 2œÜ (cm¬≤) | √Årea 3œÜ (cm¬≤) | √Årea 4œÜ (cm¬≤) |
|---------------|------------|---------------|---------------|---------------|
| 6.3 | 0.31 | 0.62 | 0.93 | 1.24 |
| 8.0 | 0.50 | 1.00 | 1.50 | 2.00 |
| 10.0 | 0.79 | 1.58 | 2.36 | 3.14 |
| 12.5 | 1.23 | 2.46 | 3.69 | 4.91 |
| 16.0 | 2.01 | 4.02 | 6.03 | 8.04 |
| 20.0 | 3.14 | 6.28 | 9.42 | 12.57 |
    ''')
    
    A_s_adot = 4.91  # 4œÜ12.5
    
    memorial.add_paragraph(f'''
**Armadura adotada:** 4œÜ12.5 mm (A_s = {A_s_adot} cm¬≤)

**Verifica√ß√£o:** {A_s_adot} cm¬≤ > {A_s_calc:.2f} cm¬≤ ‚úì

**Taxa de armadura:**
œÅ = A_s / (b√ód) = {A_s_adot} / ({b_cm}√ó{d_cm}) = {(A_s_adot/(b_cm*d_cm)*100):.2f}%

**Espa√ßamento:**
- Entre barras: s = (b - 2√óc - 4√óœÜ) / 3 = (20 - 2√ó3 - 4√ó1.25) / 3 = **3.0 cm**
- NBR 6118:2023, item 18.3.2.2: s_min = max(2cm, œÜ, 1.2√ód_max_agregado) = 2.0 cm ‚úì
    ''')
    
    # ========================================================================
    # SE√á√ÉO 8: CONCLUS√ÉO
    # ========================================================================
    memorial.add_section(
        title='Conclus√£o',
        content=f'''
O dimensionamento da viga V1 resultou nas seguintes especifica√ß√µes:

**Armadura Longitudinal:**
- Calculada: A_s = {A_s_calc:.2f} cm¬≤
- Adotada: 4œÜ12.5 mm (A_s = {A_s_adot} cm¬≤)
- Taxa de armadura: œÅ = {(A_s_adot/(b_cm*d_cm)*100):.2f}%

**Verifica√ß√µes:**
- ‚úì Dom√≠nio de deforma√ß√£o adequado (K_MD = {K_MD:.4f} < 0.295)
- ‚úì Armadura m√≠nima atendida ({A_s_adot} > {A_s_min:.2f} cm¬≤)
- ‚úì Armadura m√°xima atendida ({A_s_adot} < {A_s_max:.2f} cm¬≤)
- ‚úì Espa√ßamento entre barras adequado (3.0 cm > 2.0 cm)

Todas as exig√™ncias da NBR 6118:2023 foram atendidas.

**Observa√ß√£o:** Este memorial n√£o inclui o detalhamento da armadura transversal (estribos), 
que deve ser verificada separadamente conforme NBR 6118:2023, item 17.4.
        ''',
        level=1
    )
    
    return memorial


if __name__ == '__main__':
    # Criar memorial
    memorial = criar_memorial_completo()
    
    # Criar diret√≥rio
    output_dir = Path('output')
    output_dir.mkdir(exist_ok=True)
    
    # Exportar HTML
    html_path = output_dir / 'memorial_completo.html'
    print(f"\nüìÑ Gerando HTML: {html_path}")
    
    try:
        memorial.render(html_path, format='html')
        print(f"‚úÖ Sucesso!")
        print(f"\nüìÇ Abra o arquivo: {html_path.absolute()}")
    except Exception as e:
        print(f"‚ùå Erro: {e}")
        import traceback
        traceback.print_exc()
